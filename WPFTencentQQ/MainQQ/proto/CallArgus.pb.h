// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CallArgus.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_CallArgus_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_CallArgus_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_CallArgus_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_CallArgus_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_CallArgus_2eproto;
namespace TransmitParameters {
class CallArgus;
class CallArgusDefaultTypeInternal;
extern CallArgusDefaultTypeInternal _CallArgus_default_instance_;
class LoginResult;
class LoginResultDefaultTypeInternal;
extern LoginResultDefaultTypeInternal _LoginResult_default_instance_;
class NetArgus;
class NetArgusDefaultTypeInternal;
extern NetArgusDefaultTypeInternal _NetArgus_default_instance_;
class Pack;
class PackDefaultTypeInternal;
extern PackDefaultTypeInternal _Pack_default_instance_;
class PackArgus;
class PackArgusDefaultTypeInternal;
extern PackArgusDefaultTypeInternal _PackArgus_default_instance_;
class ToPackArgu;
class ToPackArguDefaultTypeInternal;
extern ToPackArguDefaultTypeInternal _ToPackArgu_default_instance_;
class unPack;
class unPackDefaultTypeInternal;
extern unPackDefaultTypeInternal _unPack_default_instance_;
}  // namespace TransmitParameters
PROTOBUF_NAMESPACE_OPEN
template<> ::TransmitParameters::CallArgus* Arena::CreateMaybeMessage<::TransmitParameters::CallArgus>(Arena*);
template<> ::TransmitParameters::LoginResult* Arena::CreateMaybeMessage<::TransmitParameters::LoginResult>(Arena*);
template<> ::TransmitParameters::NetArgus* Arena::CreateMaybeMessage<::TransmitParameters::NetArgus>(Arena*);
template<> ::TransmitParameters::Pack* Arena::CreateMaybeMessage<::TransmitParameters::Pack>(Arena*);
template<> ::TransmitParameters::PackArgus* Arena::CreateMaybeMessage<::TransmitParameters::PackArgus>(Arena*);
template<> ::TransmitParameters::ToPackArgu* Arena::CreateMaybeMessage<::TransmitParameters::ToPackArgu>(Arena*);
template<> ::TransmitParameters::unPack* Arena::CreateMaybeMessage<::TransmitParameters::unPack>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace TransmitParameters {

// ===================================================================

class Pack :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TransmitParameters.Pack) */ {
 public:
  Pack();
  virtual ~Pack();

  Pack(const Pack& from);
  Pack(Pack&& from) noexcept
    : Pack() {
    *this = ::std::move(from);
  }

  inline Pack& operator=(const Pack& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pack& operator=(Pack&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Pack& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Pack* internal_default_instance() {
    return reinterpret_cast<const Pack*>(
               &_Pack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Pack& a, Pack& b) {
    a.Swap(&b);
  }
  inline void Swap(Pack* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Pack* New() const final {
    return CreateMaybeMessage<Pack>(nullptr);
  }

  Pack* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Pack>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Pack& from);
  void MergeFrom(const Pack& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pack* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TransmitParameters.Pack";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CallArgus_2eproto);
    return ::descriptor_table_CallArgus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // optional bytes msg = 2;
  bool has_msg() const;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const void* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);

  // required uint32 type = 1;
  bool has_type() const;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:TransmitParameters.Pack)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_;
  friend struct ::TableStruct_CallArgus_2eproto;
};
// -------------------------------------------------------------------

class unPack :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TransmitParameters.unPack) */ {
 public:
  unPack();
  virtual ~unPack();

  unPack(const unPack& from);
  unPack(unPack&& from) noexcept
    : unPack() {
    *this = ::std::move(from);
  }

  inline unPack& operator=(const unPack& from) {
    CopyFrom(from);
    return *this;
  }
  inline unPack& operator=(unPack&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const unPack& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const unPack* internal_default_instance() {
    return reinterpret_cast<const unPack*>(
               &_unPack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(unPack& a, unPack& b) {
    a.Swap(&b);
  }
  inline void Swap(unPack* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline unPack* New() const final {
    return CreateMaybeMessage<unPack>(nullptr);
  }

  unPack* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<unPack>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const unPack& from);
  void MergeFrom(const unPack& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(unPack* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TransmitParameters.unPack";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CallArgus_2eproto);
    return ::descriptor_table_CallArgus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 7,
    kTypeFieldNumber = 1,
    kSeqFieldNumber = 2,
    kServeripFieldNumber = 4,
    kIsTurnIpFieldNumber = 3,
    kIs0836SucFieldNumber = 5,
    kIs0828SucFieldNumber = 6,
  };
  // optional bytes data = 7;
  bool has_data() const;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);

  // required uint32 type = 1;
  bool has_type() const;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 seq = 2;
  bool has_seq() const;
  void clear_seq();
  ::PROTOBUF_NAMESPACE_ID::uint32 seq() const;
  void set_seq(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 serverip = 4;
  bool has_serverip() const;
  void clear_serverip();
  ::PROTOBUF_NAMESPACE_ID::uint32 serverip() const;
  void set_serverip(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional bool isTurnIp = 3;
  bool has_isturnip() const;
  void clear_isturnip();
  bool isturnip() const;
  void set_isturnip(bool value);

  // optional bool is0836Suc = 5;
  bool has_is0836suc() const;
  void clear_is0836suc();
  bool is0836suc() const;
  void set_is0836suc(bool value);

  // optional bool is0828Suc = 6;
  bool has_is0828suc() const;
  void clear_is0828suc();
  bool is0828suc() const;
  void set_is0828suc(bool value);

  // @@protoc_insertion_point(class_scope:TransmitParameters.unPack)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 seq_;
  ::PROTOBUF_NAMESPACE_ID::uint32 serverip_;
  bool isturnip_;
  bool is0836suc_;
  bool is0828suc_;
  friend struct ::TableStruct_CallArgus_2eproto;
};
// -------------------------------------------------------------------

class ToPackArgu :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TransmitParameters.ToPackArgu) */ {
 public:
  ToPackArgu();
  virtual ~ToPackArgu();

  ToPackArgu(const ToPackArgu& from);
  ToPackArgu(ToPackArgu&& from) noexcept
    : ToPackArgu() {
    *this = ::std::move(from);
  }

  inline ToPackArgu& operator=(const ToPackArgu& from) {
    CopyFrom(from);
    return *this;
  }
  inline ToPackArgu& operator=(ToPackArgu&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ToPackArgu& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ToPackArgu* internal_default_instance() {
    return reinterpret_cast<const ToPackArgu*>(
               &_ToPackArgu_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ToPackArgu& a, ToPackArgu& b) {
    a.Swap(&b);
  }
  inline void Swap(ToPackArgu* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ToPackArgu* New() const final {
    return CreateMaybeMessage<ToPackArgu>(nullptr);
  }

  ToPackArgu* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ToPackArgu>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ToPackArgu& from);
  void MergeFrom(const ToPackArgu& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ToPackArgu* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TransmitParameters.ToPackArgu";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CallArgus_2eproto);
    return ::descriptor_table_CallArgus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 3,
    kTypeFieldNumber = 1,
    kSeqFieldNumber = 2,
  };
  // optional bytes msg = 3;
  bool has_msg() const;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const void* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);

  // required uint32 type = 1;
  bool has_type() const;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 seq = 2;
  bool has_seq() const;
  void clear_seq();
  ::PROTOBUF_NAMESPACE_ID::uint32 seq() const;
  void set_seq(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:TransmitParameters.ToPackArgu)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 seq_;
  friend struct ::TableStruct_CallArgus_2eproto;
};
// -------------------------------------------------------------------

class PackArgus :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TransmitParameters.PackArgus) */ {
 public:
  PackArgus();
  virtual ~PackArgus();

  PackArgus(const PackArgus& from);
  PackArgus(PackArgus&& from) noexcept
    : PackArgus() {
    *this = ::std::move(from);
  }

  inline PackArgus& operator=(const PackArgus& from) {
    CopyFrom(from);
    return *this;
  }
  inline PackArgus& operator=(PackArgus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PackArgus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PackArgus* internal_default_instance() {
    return reinterpret_cast<const PackArgus*>(
               &_PackArgus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PackArgus& a, PackArgus& b) {
    a.Swap(&b);
  }
  inline void Swap(PackArgus* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PackArgus* New() const final {
    return CreateMaybeMessage<PackArgus>(nullptr);
  }

  PackArgus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PackArgus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PackArgus& from);
  void MergeFrom(const PackArgus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PackArgus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TransmitParameters.PackArgus";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CallArgus_2eproto);
    return ::descriptor_table_CallArgus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPackDataFieldNumber = 2,
    kUnpackDataFieldNumber = 3,
    kToPackArguFieldNumber = 4,
    kIspackFieldNumber = 1,
  };
  // optional .TransmitParameters.Pack pack_data = 2;
  bool has_pack_data() const;
  void clear_pack_data();
  const ::TransmitParameters::Pack& pack_data() const;
  ::TransmitParameters::Pack* release_pack_data();
  ::TransmitParameters::Pack* mutable_pack_data();
  void set_allocated_pack_data(::TransmitParameters::Pack* pack_data);

  // optional .TransmitParameters.unPack unpack_data = 3;
  bool has_unpack_data() const;
  void clear_unpack_data();
  const ::TransmitParameters::unPack& unpack_data() const;
  ::TransmitParameters::unPack* release_unpack_data();
  ::TransmitParameters::unPack* mutable_unpack_data();
  void set_allocated_unpack_data(::TransmitParameters::unPack* unpack_data);

  // optional .TransmitParameters.ToPackArgu toPackArgu = 4;
  bool has_topackargu() const;
  void clear_topackargu();
  const ::TransmitParameters::ToPackArgu& topackargu() const;
  ::TransmitParameters::ToPackArgu* release_topackargu();
  ::TransmitParameters::ToPackArgu* mutable_topackargu();
  void set_allocated_topackargu(::TransmitParameters::ToPackArgu* topackargu);

  // required bool ispack = 1;
  bool has_ispack() const;
  void clear_ispack();
  bool ispack() const;
  void set_ispack(bool value);

  // @@protoc_insertion_point(class_scope:TransmitParameters.PackArgus)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TransmitParameters::Pack* pack_data_;
  ::TransmitParameters::unPack* unpack_data_;
  ::TransmitParameters::ToPackArgu* topackargu_;
  bool ispack_;
  friend struct ::TableStruct_CallArgus_2eproto;
};
// -------------------------------------------------------------------

class NetArgus :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TransmitParameters.NetArgus) */ {
 public:
  NetArgus();
  virtual ~NetArgus();

  NetArgus(const NetArgus& from);
  NetArgus(NetArgus&& from) noexcept
    : NetArgus() {
    *this = ::std::move(from);
  }

  inline NetArgus& operator=(const NetArgus& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetArgus& operator=(NetArgus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NetArgus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NetArgus* internal_default_instance() {
    return reinterpret_cast<const NetArgus*>(
               &_NetArgus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(NetArgus& a, NetArgus& b) {
    a.Swap(&b);
  }
  inline void Swap(NetArgus* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NetArgus* New() const final {
    return CreateMaybeMessage<NetArgus>(nullptr);
  }

  NetArgus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NetArgus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NetArgus& from);
  void MergeFrom(const NetArgus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetArgus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TransmitParameters.NetArgus";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CallArgus_2eproto);
    return ::descriptor_table_CallArgus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNotifyMsgFieldNumber = 3,
    kSendRecvDataFieldNumber = 4,
    kTypeFieldNumber = 1,
    kSocketFieldNumber = 2,
  };
  // optional bytes notify_msg = 3;
  bool has_notify_msg() const;
  void clear_notify_msg();
  const std::string& notify_msg() const;
  void set_notify_msg(const std::string& value);
  void set_notify_msg(std::string&& value);
  void set_notify_msg(const char* value);
  void set_notify_msg(const void* value, size_t size);
  std::string* mutable_notify_msg();
  std::string* release_notify_msg();
  void set_allocated_notify_msg(std::string* notify_msg);

  // optional bytes send_recv_data = 4;
  bool has_send_recv_data() const;
  void clear_send_recv_data();
  const std::string& send_recv_data() const;
  void set_send_recv_data(const std::string& value);
  void set_send_recv_data(std::string&& value);
  void set_send_recv_data(const char* value);
  void set_send_recv_data(const void* value, size_t size);
  std::string* mutable_send_recv_data();
  std::string* release_send_recv_data();
  void set_allocated_send_recv_data(std::string* send_recv_data);

  // required uint32 type = 1;
  bool has_type() const;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // required uint32 socket = 2;
  bool has_socket() const;
  void clear_socket();
  ::PROTOBUF_NAMESPACE_ID::uint32 socket() const;
  void set_socket(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:TransmitParameters.NetArgus)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr notify_msg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr send_recv_data_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 socket_;
  friend struct ::TableStruct_CallArgus_2eproto;
};
// -------------------------------------------------------------------

class LoginResult :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TransmitParameters.LoginResult) */ {
 public:
  LoginResult();
  virtual ~LoginResult();

  LoginResult(const LoginResult& from);
  LoginResult(LoginResult&& from) noexcept
    : LoginResult() {
    *this = ::std::move(from);
  }

  inline LoginResult& operator=(const LoginResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginResult& operator=(LoginResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoginResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginResult* internal_default_instance() {
    return reinterpret_cast<const LoginResult*>(
               &_LoginResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(LoginResult& a, LoginResult& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginResult* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginResult* New() const final {
    return CreateMaybeMessage<LoginResult>(nullptr);
  }

  LoginResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoginResult& from);
  void MergeFrom(const LoginResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TransmitParameters.LoginResult";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CallArgus_2eproto);
    return ::descriptor_table_CallArgus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNotifyMsgFieldNumber = 2,
    kCodedataFieldNumber = 3,
    kCodeurlFieldNumber = 4,
  };
  // optional string notifyMsg = 2;
  bool has_notifymsg() const;
  void clear_notifymsg();
  const std::string& notifymsg() const;
  void set_notifymsg(const std::string& value);
  void set_notifymsg(std::string&& value);
  void set_notifymsg(const char* value);
  void set_notifymsg(const char* value, size_t size);
  std::string* mutable_notifymsg();
  std::string* release_notifymsg();
  void set_allocated_notifymsg(std::string* notifymsg);

  // optional bytes codedata = 3;
  bool has_codedata() const;
  void clear_codedata();
  const std::string& codedata() const;
  void set_codedata(const std::string& value);
  void set_codedata(std::string&& value);
  void set_codedata(const char* value);
  void set_codedata(const void* value, size_t size);
  std::string* mutable_codedata();
  std::string* release_codedata();
  void set_allocated_codedata(std::string* codedata);

  // optional string codeurl = 4;
  bool has_codeurl() const;
  void clear_codeurl();
  const std::string& codeurl() const;
  void set_codeurl(const std::string& value);
  void set_codeurl(std::string&& value);
  void set_codeurl(const char* value);
  void set_codeurl(const char* value, size_t size);
  std::string* mutable_codeurl();
  std::string* release_codeurl();
  void set_allocated_codeurl(std::string* codeurl);

  // @@protoc_insertion_point(class_scope:TransmitParameters.LoginResult)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr notifymsg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr codedata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr codeurl_;
  friend struct ::TableStruct_CallArgus_2eproto;
};
// -------------------------------------------------------------------

class CallArgus :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TransmitParameters.CallArgus) */ {
 public:
  CallArgus();
  virtual ~CallArgus();

  CallArgus(const CallArgus& from);
  CallArgus(CallArgus&& from) noexcept
    : CallArgus() {
    *this = ::std::move(from);
  }

  inline CallArgus& operator=(const CallArgus& from) {
    CopyFrom(from);
    return *this;
  }
  inline CallArgus& operator=(CallArgus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CallArgus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CallArgus* internal_default_instance() {
    return reinterpret_cast<const CallArgus*>(
               &_CallArgus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CallArgus& a, CallArgus& b) {
    a.Swap(&b);
  }
  inline void Swap(CallArgus* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CallArgus* New() const final {
    return CreateMaybeMessage<CallArgus>(nullptr);
  }

  CallArgus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CallArgus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CallArgus& from);
  void MergeFrom(const CallArgus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CallArgus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TransmitParameters.CallArgus";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CallArgus_2eproto);
    return ::descriptor_table_CallArgus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPackArguFieldNumber = 2,
    kNetArguFieldNumber = 3,
    kLoginresultFieldNumber = 4,
    kIsCallSucessFieldNumber = 1,
  };
  // optional .TransmitParameters.PackArgus pack_argu = 2;
  bool has_pack_argu() const;
  void clear_pack_argu();
  const ::TransmitParameters::PackArgus& pack_argu() const;
  ::TransmitParameters::PackArgus* release_pack_argu();
  ::TransmitParameters::PackArgus* mutable_pack_argu();
  void set_allocated_pack_argu(::TransmitParameters::PackArgus* pack_argu);

  // optional .TransmitParameters.NetArgus net_argu = 3;
  bool has_net_argu() const;
  void clear_net_argu();
  const ::TransmitParameters::NetArgus& net_argu() const;
  ::TransmitParameters::NetArgus* release_net_argu();
  ::TransmitParameters::NetArgus* mutable_net_argu();
  void set_allocated_net_argu(::TransmitParameters::NetArgus* net_argu);

  // optional .TransmitParameters.LoginResult loginresult = 4;
  bool has_loginresult() const;
  void clear_loginresult();
  const ::TransmitParameters::LoginResult& loginresult() const;
  ::TransmitParameters::LoginResult* release_loginresult();
  ::TransmitParameters::LoginResult* mutable_loginresult();
  void set_allocated_loginresult(::TransmitParameters::LoginResult* loginresult);

  // required bool isCallSucess = 1;
  bool has_iscallsucess() const;
  void clear_iscallsucess();
  bool iscallsucess() const;
  void set_iscallsucess(bool value);

  // @@protoc_insertion_point(class_scope:TransmitParameters.CallArgus)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TransmitParameters::PackArgus* pack_argu_;
  ::TransmitParameters::NetArgus* net_argu_;
  ::TransmitParameters::LoginResult* loginresult_;
  bool iscallsucess_;
  friend struct ::TableStruct_CallArgus_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Pack

// required uint32 type = 1;
inline bool Pack::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Pack::clear_type() {
  type_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Pack::type() const {
  // @@protoc_insertion_point(field_get:TransmitParameters.Pack.type)
  return type_;
}
inline void Pack::set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  type_ = value;
  // @@protoc_insertion_point(field_set:TransmitParameters.Pack.type)
}

// optional bytes msg = 2;
inline bool Pack::has_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Pack::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Pack::msg() const {
  // @@protoc_insertion_point(field_get:TransmitParameters.Pack.msg)
  return msg_.GetNoArena();
}
inline void Pack::set_msg(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TransmitParameters.Pack.msg)
}
inline void Pack::set_msg(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TransmitParameters.Pack.msg)
}
inline void Pack::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TransmitParameters.Pack.msg)
}
inline void Pack::set_msg(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TransmitParameters.Pack.msg)
}
inline std::string* Pack::mutable_msg() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:TransmitParameters.Pack.msg)
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Pack::release_msg() {
  // @@protoc_insertion_point(field_release:TransmitParameters.Pack.msg)
  if (!has_msg()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return msg_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Pack::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:TransmitParameters.Pack.msg)
}

// -------------------------------------------------------------------

// unPack

// required uint32 type = 1;
inline bool unPack::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void unPack::clear_type() {
  type_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 unPack::type() const {
  // @@protoc_insertion_point(field_get:TransmitParameters.unPack.type)
  return type_;
}
inline void unPack::set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  type_ = value;
  // @@protoc_insertion_point(field_set:TransmitParameters.unPack.type)
}

// optional uint32 seq = 2;
inline bool unPack::has_seq() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void unPack::clear_seq() {
  seq_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 unPack::seq() const {
  // @@protoc_insertion_point(field_get:TransmitParameters.unPack.seq)
  return seq_;
}
inline void unPack::set_seq(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  seq_ = value;
  // @@protoc_insertion_point(field_set:TransmitParameters.unPack.seq)
}

// optional bool isTurnIp = 3;
inline bool unPack::has_isturnip() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void unPack::clear_isturnip() {
  isturnip_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool unPack::isturnip() const {
  // @@protoc_insertion_point(field_get:TransmitParameters.unPack.isTurnIp)
  return isturnip_;
}
inline void unPack::set_isturnip(bool value) {
  _has_bits_[0] |= 0x00000010u;
  isturnip_ = value;
  // @@protoc_insertion_point(field_set:TransmitParameters.unPack.isTurnIp)
}

// optional uint32 serverip = 4;
inline bool unPack::has_serverip() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void unPack::clear_serverip() {
  serverip_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 unPack::serverip() const {
  // @@protoc_insertion_point(field_get:TransmitParameters.unPack.serverip)
  return serverip_;
}
inline void unPack::set_serverip(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  serverip_ = value;
  // @@protoc_insertion_point(field_set:TransmitParameters.unPack.serverip)
}

// optional bool is0836Suc = 5;
inline bool unPack::has_is0836suc() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void unPack::clear_is0836suc() {
  is0836suc_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool unPack::is0836suc() const {
  // @@protoc_insertion_point(field_get:TransmitParameters.unPack.is0836Suc)
  return is0836suc_;
}
inline void unPack::set_is0836suc(bool value) {
  _has_bits_[0] |= 0x00000020u;
  is0836suc_ = value;
  // @@protoc_insertion_point(field_set:TransmitParameters.unPack.is0836Suc)
}

// optional bool is0828Suc = 6;
inline bool unPack::has_is0828suc() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void unPack::clear_is0828suc() {
  is0828suc_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool unPack::is0828suc() const {
  // @@protoc_insertion_point(field_get:TransmitParameters.unPack.is0828Suc)
  return is0828suc_;
}
inline void unPack::set_is0828suc(bool value) {
  _has_bits_[0] |= 0x00000040u;
  is0828suc_ = value;
  // @@protoc_insertion_point(field_set:TransmitParameters.unPack.is0828Suc)
}

// optional bytes data = 7;
inline bool unPack::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void unPack::clear_data() {
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& unPack::data() const {
  // @@protoc_insertion_point(field_get:TransmitParameters.unPack.data)
  return data_.GetNoArena();
}
inline void unPack::set_data(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TransmitParameters.unPack.data)
}
inline void unPack::set_data(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TransmitParameters.unPack.data)
}
inline void unPack::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TransmitParameters.unPack.data)
}
inline void unPack::set_data(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TransmitParameters.unPack.data)
}
inline std::string* unPack::mutable_data() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:TransmitParameters.unPack.data)
  return data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* unPack::release_data() {
  // @@protoc_insertion_point(field_release:TransmitParameters.unPack.data)
  if (!has_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return data_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void unPack::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:TransmitParameters.unPack.data)
}

// -------------------------------------------------------------------

// ToPackArgu

// required uint32 type = 1;
inline bool ToPackArgu::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ToPackArgu::clear_type() {
  type_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ToPackArgu::type() const {
  // @@protoc_insertion_point(field_get:TransmitParameters.ToPackArgu.type)
  return type_;
}
inline void ToPackArgu::set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  type_ = value;
  // @@protoc_insertion_point(field_set:TransmitParameters.ToPackArgu.type)
}

// optional uint32 seq = 2;
inline bool ToPackArgu::has_seq() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ToPackArgu::clear_seq() {
  seq_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ToPackArgu::seq() const {
  // @@protoc_insertion_point(field_get:TransmitParameters.ToPackArgu.seq)
  return seq_;
}
inline void ToPackArgu::set_seq(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  seq_ = value;
  // @@protoc_insertion_point(field_set:TransmitParameters.ToPackArgu.seq)
}

// optional bytes msg = 3;
inline bool ToPackArgu::has_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ToPackArgu::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ToPackArgu::msg() const {
  // @@protoc_insertion_point(field_get:TransmitParameters.ToPackArgu.msg)
  return msg_.GetNoArena();
}
inline void ToPackArgu::set_msg(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TransmitParameters.ToPackArgu.msg)
}
inline void ToPackArgu::set_msg(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TransmitParameters.ToPackArgu.msg)
}
inline void ToPackArgu::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TransmitParameters.ToPackArgu.msg)
}
inline void ToPackArgu::set_msg(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TransmitParameters.ToPackArgu.msg)
}
inline std::string* ToPackArgu::mutable_msg() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:TransmitParameters.ToPackArgu.msg)
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ToPackArgu::release_msg() {
  // @@protoc_insertion_point(field_release:TransmitParameters.ToPackArgu.msg)
  if (!has_msg()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return msg_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ToPackArgu::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:TransmitParameters.ToPackArgu.msg)
}

// -------------------------------------------------------------------

// PackArgus

// required bool ispack = 1;
inline bool PackArgus::has_ispack() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PackArgus::clear_ispack() {
  ispack_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool PackArgus::ispack() const {
  // @@protoc_insertion_point(field_get:TransmitParameters.PackArgus.ispack)
  return ispack_;
}
inline void PackArgus::set_ispack(bool value) {
  _has_bits_[0] |= 0x00000008u;
  ispack_ = value;
  // @@protoc_insertion_point(field_set:TransmitParameters.PackArgus.ispack)
}

// optional .TransmitParameters.Pack pack_data = 2;
inline bool PackArgus::has_pack_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PackArgus::clear_pack_data() {
  if (pack_data_ != nullptr) pack_data_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TransmitParameters::Pack& PackArgus::pack_data() const {
  const ::TransmitParameters::Pack* p = pack_data_;
  // @@protoc_insertion_point(field_get:TransmitParameters.PackArgus.pack_data)
  return p != nullptr ? *p : *reinterpret_cast<const ::TransmitParameters::Pack*>(
      &::TransmitParameters::_Pack_default_instance_);
}
inline ::TransmitParameters::Pack* PackArgus::release_pack_data() {
  // @@protoc_insertion_point(field_release:TransmitParameters.PackArgus.pack_data)
  _has_bits_[0] &= ~0x00000001u;
  ::TransmitParameters::Pack* temp = pack_data_;
  pack_data_ = nullptr;
  return temp;
}
inline ::TransmitParameters::Pack* PackArgus::mutable_pack_data() {
  _has_bits_[0] |= 0x00000001u;
  if (pack_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::TransmitParameters::Pack>(GetArenaNoVirtual());
    pack_data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:TransmitParameters.PackArgus.pack_data)
  return pack_data_;
}
inline void PackArgus::set_allocated_pack_data(::TransmitParameters::Pack* pack_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pack_data_;
  }
  if (pack_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pack_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pack_data, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  pack_data_ = pack_data;
  // @@protoc_insertion_point(field_set_allocated:TransmitParameters.PackArgus.pack_data)
}

// optional .TransmitParameters.unPack unpack_data = 3;
inline bool PackArgus::has_unpack_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PackArgus::clear_unpack_data() {
  if (unpack_data_ != nullptr) unpack_data_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::TransmitParameters::unPack& PackArgus::unpack_data() const {
  const ::TransmitParameters::unPack* p = unpack_data_;
  // @@protoc_insertion_point(field_get:TransmitParameters.PackArgus.unpack_data)
  return p != nullptr ? *p : *reinterpret_cast<const ::TransmitParameters::unPack*>(
      &::TransmitParameters::_unPack_default_instance_);
}
inline ::TransmitParameters::unPack* PackArgus::release_unpack_data() {
  // @@protoc_insertion_point(field_release:TransmitParameters.PackArgus.unpack_data)
  _has_bits_[0] &= ~0x00000002u;
  ::TransmitParameters::unPack* temp = unpack_data_;
  unpack_data_ = nullptr;
  return temp;
}
inline ::TransmitParameters::unPack* PackArgus::mutable_unpack_data() {
  _has_bits_[0] |= 0x00000002u;
  if (unpack_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::TransmitParameters::unPack>(GetArenaNoVirtual());
    unpack_data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:TransmitParameters.PackArgus.unpack_data)
  return unpack_data_;
}
inline void PackArgus::set_allocated_unpack_data(::TransmitParameters::unPack* unpack_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete unpack_data_;
  }
  if (unpack_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      unpack_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, unpack_data, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  unpack_data_ = unpack_data;
  // @@protoc_insertion_point(field_set_allocated:TransmitParameters.PackArgus.unpack_data)
}

// optional .TransmitParameters.ToPackArgu toPackArgu = 4;
inline bool PackArgus::has_topackargu() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PackArgus::clear_topackargu() {
  if (topackargu_ != nullptr) topackargu_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::TransmitParameters::ToPackArgu& PackArgus::topackargu() const {
  const ::TransmitParameters::ToPackArgu* p = topackargu_;
  // @@protoc_insertion_point(field_get:TransmitParameters.PackArgus.toPackArgu)
  return p != nullptr ? *p : *reinterpret_cast<const ::TransmitParameters::ToPackArgu*>(
      &::TransmitParameters::_ToPackArgu_default_instance_);
}
inline ::TransmitParameters::ToPackArgu* PackArgus::release_topackargu() {
  // @@protoc_insertion_point(field_release:TransmitParameters.PackArgus.toPackArgu)
  _has_bits_[0] &= ~0x00000004u;
  ::TransmitParameters::ToPackArgu* temp = topackargu_;
  topackargu_ = nullptr;
  return temp;
}
inline ::TransmitParameters::ToPackArgu* PackArgus::mutable_topackargu() {
  _has_bits_[0] |= 0x00000004u;
  if (topackargu_ == nullptr) {
    auto* p = CreateMaybeMessage<::TransmitParameters::ToPackArgu>(GetArenaNoVirtual());
    topackargu_ = p;
  }
  // @@protoc_insertion_point(field_mutable:TransmitParameters.PackArgus.toPackArgu)
  return topackargu_;
}
inline void PackArgus::set_allocated_topackargu(::TransmitParameters::ToPackArgu* topackargu) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete topackargu_;
  }
  if (topackargu) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      topackargu = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, topackargu, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  topackargu_ = topackargu;
  // @@protoc_insertion_point(field_set_allocated:TransmitParameters.PackArgus.toPackArgu)
}

// -------------------------------------------------------------------

// NetArgus

// required uint32 type = 1;
inline bool NetArgus::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetArgus::clear_type() {
  type_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NetArgus::type() const {
  // @@protoc_insertion_point(field_get:TransmitParameters.NetArgus.type)
  return type_;
}
inline void NetArgus::set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  type_ = value;
  // @@protoc_insertion_point(field_set:TransmitParameters.NetArgus.type)
}

// required uint32 socket = 2;
inline bool NetArgus::has_socket() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NetArgus::clear_socket() {
  socket_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NetArgus::socket() const {
  // @@protoc_insertion_point(field_get:TransmitParameters.NetArgus.socket)
  return socket_;
}
inline void NetArgus::set_socket(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  socket_ = value;
  // @@protoc_insertion_point(field_set:TransmitParameters.NetArgus.socket)
}

// optional bytes notify_msg = 3;
inline bool NetArgus::has_notify_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetArgus::clear_notify_msg() {
  notify_msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& NetArgus::notify_msg() const {
  // @@protoc_insertion_point(field_get:TransmitParameters.NetArgus.notify_msg)
  return notify_msg_.GetNoArena();
}
inline void NetArgus::set_notify_msg(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  notify_msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TransmitParameters.NetArgus.notify_msg)
}
inline void NetArgus::set_notify_msg(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  notify_msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TransmitParameters.NetArgus.notify_msg)
}
inline void NetArgus::set_notify_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  notify_msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TransmitParameters.NetArgus.notify_msg)
}
inline void NetArgus::set_notify_msg(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  notify_msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TransmitParameters.NetArgus.notify_msg)
}
inline std::string* NetArgus::mutable_notify_msg() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:TransmitParameters.NetArgus.notify_msg)
  return notify_msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NetArgus::release_notify_msg() {
  // @@protoc_insertion_point(field_release:TransmitParameters.NetArgus.notify_msg)
  if (!has_notify_msg()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return notify_msg_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NetArgus::set_allocated_notify_msg(std::string* notify_msg) {
  if (notify_msg != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  notify_msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), notify_msg);
  // @@protoc_insertion_point(field_set_allocated:TransmitParameters.NetArgus.notify_msg)
}

// optional bytes send_recv_data = 4;
inline bool NetArgus::has_send_recv_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetArgus::clear_send_recv_data() {
  send_recv_data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& NetArgus::send_recv_data() const {
  // @@protoc_insertion_point(field_get:TransmitParameters.NetArgus.send_recv_data)
  return send_recv_data_.GetNoArena();
}
inline void NetArgus::set_send_recv_data(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  send_recv_data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TransmitParameters.NetArgus.send_recv_data)
}
inline void NetArgus::set_send_recv_data(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  send_recv_data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TransmitParameters.NetArgus.send_recv_data)
}
inline void NetArgus::set_send_recv_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  send_recv_data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TransmitParameters.NetArgus.send_recv_data)
}
inline void NetArgus::set_send_recv_data(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  send_recv_data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TransmitParameters.NetArgus.send_recv_data)
}
inline std::string* NetArgus::mutable_send_recv_data() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:TransmitParameters.NetArgus.send_recv_data)
  return send_recv_data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NetArgus::release_send_recv_data() {
  // @@protoc_insertion_point(field_release:TransmitParameters.NetArgus.send_recv_data)
  if (!has_send_recv_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return send_recv_data_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NetArgus::set_allocated_send_recv_data(std::string* send_recv_data) {
  if (send_recv_data != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  send_recv_data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), send_recv_data);
  // @@protoc_insertion_point(field_set_allocated:TransmitParameters.NetArgus.send_recv_data)
}

// -------------------------------------------------------------------

// LoginResult

// optional string notifyMsg = 2;
inline bool LoginResult::has_notifymsg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginResult::clear_notifymsg() {
  notifymsg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LoginResult::notifymsg() const {
  // @@protoc_insertion_point(field_get:TransmitParameters.LoginResult.notifyMsg)
  return notifymsg_.GetNoArena();
}
inline void LoginResult::set_notifymsg(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  notifymsg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TransmitParameters.LoginResult.notifyMsg)
}
inline void LoginResult::set_notifymsg(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  notifymsg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TransmitParameters.LoginResult.notifyMsg)
}
inline void LoginResult::set_notifymsg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  notifymsg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TransmitParameters.LoginResult.notifyMsg)
}
inline void LoginResult::set_notifymsg(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  notifymsg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TransmitParameters.LoginResult.notifyMsg)
}
inline std::string* LoginResult::mutable_notifymsg() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:TransmitParameters.LoginResult.notifyMsg)
  return notifymsg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LoginResult::release_notifymsg() {
  // @@protoc_insertion_point(field_release:TransmitParameters.LoginResult.notifyMsg)
  if (!has_notifymsg()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return notifymsg_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LoginResult::set_allocated_notifymsg(std::string* notifymsg) {
  if (notifymsg != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  notifymsg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), notifymsg);
  // @@protoc_insertion_point(field_set_allocated:TransmitParameters.LoginResult.notifyMsg)
}

// optional bytes codedata = 3;
inline bool LoginResult::has_codedata() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LoginResult::clear_codedata() {
  codedata_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& LoginResult::codedata() const {
  // @@protoc_insertion_point(field_get:TransmitParameters.LoginResult.codedata)
  return codedata_.GetNoArena();
}
inline void LoginResult::set_codedata(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  codedata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TransmitParameters.LoginResult.codedata)
}
inline void LoginResult::set_codedata(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  codedata_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TransmitParameters.LoginResult.codedata)
}
inline void LoginResult::set_codedata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  codedata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TransmitParameters.LoginResult.codedata)
}
inline void LoginResult::set_codedata(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  codedata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TransmitParameters.LoginResult.codedata)
}
inline std::string* LoginResult::mutable_codedata() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:TransmitParameters.LoginResult.codedata)
  return codedata_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LoginResult::release_codedata() {
  // @@protoc_insertion_point(field_release:TransmitParameters.LoginResult.codedata)
  if (!has_codedata()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return codedata_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LoginResult::set_allocated_codedata(std::string* codedata) {
  if (codedata != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  codedata_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), codedata);
  // @@protoc_insertion_point(field_set_allocated:TransmitParameters.LoginResult.codedata)
}

// optional string codeurl = 4;
inline bool LoginResult::has_codeurl() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LoginResult::clear_codeurl() {
  codeurl_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& LoginResult::codeurl() const {
  // @@protoc_insertion_point(field_get:TransmitParameters.LoginResult.codeurl)
  return codeurl_.GetNoArena();
}
inline void LoginResult::set_codeurl(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  codeurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TransmitParameters.LoginResult.codeurl)
}
inline void LoginResult::set_codeurl(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  codeurl_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TransmitParameters.LoginResult.codeurl)
}
inline void LoginResult::set_codeurl(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  codeurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TransmitParameters.LoginResult.codeurl)
}
inline void LoginResult::set_codeurl(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  codeurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TransmitParameters.LoginResult.codeurl)
}
inline std::string* LoginResult::mutable_codeurl() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:TransmitParameters.LoginResult.codeurl)
  return codeurl_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LoginResult::release_codeurl() {
  // @@protoc_insertion_point(field_release:TransmitParameters.LoginResult.codeurl)
  if (!has_codeurl()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return codeurl_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LoginResult::set_allocated_codeurl(std::string* codeurl) {
  if (codeurl != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  codeurl_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), codeurl);
  // @@protoc_insertion_point(field_set_allocated:TransmitParameters.LoginResult.codeurl)
}

// -------------------------------------------------------------------

// CallArgus

// required bool isCallSucess = 1;
inline bool CallArgus::has_iscallsucess() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CallArgus::clear_iscallsucess() {
  iscallsucess_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool CallArgus::iscallsucess() const {
  // @@protoc_insertion_point(field_get:TransmitParameters.CallArgus.isCallSucess)
  return iscallsucess_;
}
inline void CallArgus::set_iscallsucess(bool value) {
  _has_bits_[0] |= 0x00000008u;
  iscallsucess_ = value;
  // @@protoc_insertion_point(field_set:TransmitParameters.CallArgus.isCallSucess)
}

// optional .TransmitParameters.PackArgus pack_argu = 2;
inline bool CallArgus::has_pack_argu() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CallArgus::clear_pack_argu() {
  if (pack_argu_ != nullptr) pack_argu_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TransmitParameters::PackArgus& CallArgus::pack_argu() const {
  const ::TransmitParameters::PackArgus* p = pack_argu_;
  // @@protoc_insertion_point(field_get:TransmitParameters.CallArgus.pack_argu)
  return p != nullptr ? *p : *reinterpret_cast<const ::TransmitParameters::PackArgus*>(
      &::TransmitParameters::_PackArgus_default_instance_);
}
inline ::TransmitParameters::PackArgus* CallArgus::release_pack_argu() {
  // @@protoc_insertion_point(field_release:TransmitParameters.CallArgus.pack_argu)
  _has_bits_[0] &= ~0x00000001u;
  ::TransmitParameters::PackArgus* temp = pack_argu_;
  pack_argu_ = nullptr;
  return temp;
}
inline ::TransmitParameters::PackArgus* CallArgus::mutable_pack_argu() {
  _has_bits_[0] |= 0x00000001u;
  if (pack_argu_ == nullptr) {
    auto* p = CreateMaybeMessage<::TransmitParameters::PackArgus>(GetArenaNoVirtual());
    pack_argu_ = p;
  }
  // @@protoc_insertion_point(field_mutable:TransmitParameters.CallArgus.pack_argu)
  return pack_argu_;
}
inline void CallArgus::set_allocated_pack_argu(::TransmitParameters::PackArgus* pack_argu) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pack_argu_;
  }
  if (pack_argu) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pack_argu = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pack_argu, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  pack_argu_ = pack_argu;
  // @@protoc_insertion_point(field_set_allocated:TransmitParameters.CallArgus.pack_argu)
}

// optional .TransmitParameters.NetArgus net_argu = 3;
inline bool CallArgus::has_net_argu() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CallArgus::clear_net_argu() {
  if (net_argu_ != nullptr) net_argu_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::TransmitParameters::NetArgus& CallArgus::net_argu() const {
  const ::TransmitParameters::NetArgus* p = net_argu_;
  // @@protoc_insertion_point(field_get:TransmitParameters.CallArgus.net_argu)
  return p != nullptr ? *p : *reinterpret_cast<const ::TransmitParameters::NetArgus*>(
      &::TransmitParameters::_NetArgus_default_instance_);
}
inline ::TransmitParameters::NetArgus* CallArgus::release_net_argu() {
  // @@protoc_insertion_point(field_release:TransmitParameters.CallArgus.net_argu)
  _has_bits_[0] &= ~0x00000002u;
  ::TransmitParameters::NetArgus* temp = net_argu_;
  net_argu_ = nullptr;
  return temp;
}
inline ::TransmitParameters::NetArgus* CallArgus::mutable_net_argu() {
  _has_bits_[0] |= 0x00000002u;
  if (net_argu_ == nullptr) {
    auto* p = CreateMaybeMessage<::TransmitParameters::NetArgus>(GetArenaNoVirtual());
    net_argu_ = p;
  }
  // @@protoc_insertion_point(field_mutable:TransmitParameters.CallArgus.net_argu)
  return net_argu_;
}
inline void CallArgus::set_allocated_net_argu(::TransmitParameters::NetArgus* net_argu) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete net_argu_;
  }
  if (net_argu) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      net_argu = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, net_argu, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  net_argu_ = net_argu;
  // @@protoc_insertion_point(field_set_allocated:TransmitParameters.CallArgus.net_argu)
}

// optional .TransmitParameters.LoginResult loginresult = 4;
inline bool CallArgus::has_loginresult() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CallArgus::clear_loginresult() {
  if (loginresult_ != nullptr) loginresult_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::TransmitParameters::LoginResult& CallArgus::loginresult() const {
  const ::TransmitParameters::LoginResult* p = loginresult_;
  // @@protoc_insertion_point(field_get:TransmitParameters.CallArgus.loginresult)
  return p != nullptr ? *p : *reinterpret_cast<const ::TransmitParameters::LoginResult*>(
      &::TransmitParameters::_LoginResult_default_instance_);
}
inline ::TransmitParameters::LoginResult* CallArgus::release_loginresult() {
  // @@protoc_insertion_point(field_release:TransmitParameters.CallArgus.loginresult)
  _has_bits_[0] &= ~0x00000004u;
  ::TransmitParameters::LoginResult* temp = loginresult_;
  loginresult_ = nullptr;
  return temp;
}
inline ::TransmitParameters::LoginResult* CallArgus::mutable_loginresult() {
  _has_bits_[0] |= 0x00000004u;
  if (loginresult_ == nullptr) {
    auto* p = CreateMaybeMessage<::TransmitParameters::LoginResult>(GetArenaNoVirtual());
    loginresult_ = p;
  }
  // @@protoc_insertion_point(field_mutable:TransmitParameters.CallArgus.loginresult)
  return loginresult_;
}
inline void CallArgus::set_allocated_loginresult(::TransmitParameters::LoginResult* loginresult) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete loginresult_;
  }
  if (loginresult) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      loginresult = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, loginresult, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  loginresult_ = loginresult;
  // @@protoc_insertion_point(field_set_allocated:TransmitParameters.CallArgus.loginresult)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace TransmitParameters

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_CallArgus_2eproto
