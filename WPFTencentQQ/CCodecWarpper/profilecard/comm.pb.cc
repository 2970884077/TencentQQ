// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: comm.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "comm.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace SummaryCardBusiEntry {

namespace {

const ::google::protobuf::Descriptor* comm_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  comm_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_comm_2eproto() {
  protobuf_AddDesc_comm_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "comm.proto");
  GOOGLE_CHECK(file != NULL);
  comm_descriptor_ = file->message_type(0);
  static const int comm_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(comm, ver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(comm, seq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(comm, fromuin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(comm, touin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(comm, service_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(comm, session_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(comm, session_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(comm, client_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(comm, display_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(comm, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(comm, err_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(comm, platform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(comm, qqver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(comm, build_),
  };
  comm_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      comm_descriptor_,
      comm::default_instance_,
      comm_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(comm, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(comm, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(comm));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_comm_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    comm_descriptor_, &comm::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_comm_2eproto() {
  delete comm::default_instance_;
  delete comm_reflection_;
}

void protobuf_AddDesc_comm_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::SummaryCardBusiEntry::protobuf_AddDesc_ui_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\ncomm.proto\022\024SummaryCardBusiEntry\032\010ui.p"
    "roto\"\213\002\n\004comm\022\013\n\003ver\030\001 \001(\r\022\013\n\003seq\030\002 \001(\r\022"
    "\017\n\007fromuin\030\003 \001(\004\022\r\n\005touin\030\004 \001(\004\022\017\n\007servi"
    "ce\030\005 \001(\r\022\024\n\014session_type\030\006 \001(\r\022\023\n\013sessio"
    "n_key\030\007 \001(\014\022\021\n\tclient_ip\030\010 \001(\r\022)\n\007displa"
    "y\030\t \001(\0132\030.SummaryCardBusiEntry.ui\022\016\n\006res"
    "ult\030\n \001(\r\022\017\n\007err_msg\030\013 \001(\t\022\020\n\010platform\030\014"
    " \001(\r\022\r\n\005qqver\030\r \001(\t\022\r\n\005build\030\016 \001(\005", 314);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "comm.proto", &protobuf_RegisterTypes);
  comm::default_instance_ = new comm();
  comm::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_comm_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_comm_2eproto {
  StaticDescriptorInitializer_comm_2eproto() {
    protobuf_AddDesc_comm_2eproto();
  }
} static_descriptor_initializer_comm_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int comm::kVerFieldNumber;
const int comm::kSeqFieldNumber;
const int comm::kFromuinFieldNumber;
const int comm::kTouinFieldNumber;
const int comm::kServiceFieldNumber;
const int comm::kSessionTypeFieldNumber;
const int comm::kSessionKeyFieldNumber;
const int comm::kClientIpFieldNumber;
const int comm::kDisplayFieldNumber;
const int comm::kResultFieldNumber;
const int comm::kErrMsgFieldNumber;
const int comm::kPlatformFieldNumber;
const int comm::kQqverFieldNumber;
const int comm::kBuildFieldNumber;
#endif  // !_MSC_VER

comm::comm()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void comm::InitAsDefaultInstance() {
  display_ = const_cast< ::SummaryCardBusiEntry::ui*>(&::SummaryCardBusiEntry::ui::default_instance());
}

comm::comm(const comm& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void comm::SharedCtor() {
  _cached_size_ = 0;
  ver_ = 0u;
  seq_ = 0u;
  fromuin_ = GOOGLE_ULONGLONG(0);
  touin_ = GOOGLE_ULONGLONG(0);
  service_ = 0u;
  session_type_ = 0u;
  session_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  client_ip_ = 0u;
  display_ = NULL;
  result_ = 0u;
  err_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  platform_ = 0u;
  qqver_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  build_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

comm::~comm() {
  SharedDtor();
}

void comm::SharedDtor() {
  if (session_key_ != &::google::protobuf::internal::kEmptyString) {
    delete session_key_;
  }
  if (err_msg_ != &::google::protobuf::internal::kEmptyString) {
    delete err_msg_;
  }
  if (qqver_ != &::google::protobuf::internal::kEmptyString) {
    delete qqver_;
  }
  if (this != default_instance_) {
    delete display_;
  }
}

void comm::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* comm::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return comm_descriptor_;
}

const comm& comm::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_comm_2eproto();
  return *default_instance_;
}

comm* comm::default_instance_ = NULL;

comm* comm::New() const {
  return new comm;
}

void comm::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ver_ = 0u;
    seq_ = 0u;
    fromuin_ = GOOGLE_ULONGLONG(0);
    touin_ = GOOGLE_ULONGLONG(0);
    service_ = 0u;
    session_type_ = 0u;
    if (has_session_key()) {
      if (session_key_ != &::google::protobuf::internal::kEmptyString) {
        session_key_->clear();
      }
    }
    client_ip_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_display()) {
      if (display_ != NULL) display_->::SummaryCardBusiEntry::ui::Clear();
    }
    result_ = 0u;
    if (has_err_msg()) {
      if (err_msg_ != &::google::protobuf::internal::kEmptyString) {
        err_msg_->clear();
      }
    }
    platform_ = 0u;
    if (has_qqver()) {
      if (qqver_ != &::google::protobuf::internal::kEmptyString) {
        qqver_->clear();
      }
    }
    build_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool comm::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ver = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ver_)));
          set_has_ver();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_seq;
        break;
      }

      // optional uint32 seq = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seq_)));
          set_has_seq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_fromuin;
        break;
      }

      // optional uint64 fromuin = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fromuin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fromuin_)));
          set_has_fromuin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_touin;
        break;
      }

      // optional uint64 touin = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_touin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &touin_)));
          set_has_touin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_service;
        break;
      }

      // optional uint32 service = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_service:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &service_)));
          set_has_service();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_session_type;
        break;
      }

      // optional uint32 session_type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_session_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &session_type_)));
          set_has_session_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_session_key;
        break;
      }

      // optional bytes session_key = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_session_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_session_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_client_ip;
        break;
      }

      // optional uint32 client_ip = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_client_ip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_ip_)));
          set_has_client_ip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_display;
        break;
      }

      // optional .SummaryCardBusiEntry.ui display = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_display:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_display()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_result;
        break;
      }

      // optional uint32 result = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_err_msg;
        break;
      }

      // optional string err_msg = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_err_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_err_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->err_msg().data(), this->err_msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_platform;
        break;
      }

      // optional uint32 platform = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_platform:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &platform_)));
          set_has_platform();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_qqver;
        break;
      }

      // optional string qqver = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_qqver:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_qqver()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->qqver().data(), this->qqver().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_build;
        break;
      }

      // optional int32 build = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_build:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &build_)));
          set_has_build();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void comm::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 ver = 1;
  if (has_ver()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ver(), output);
  }

  // optional uint32 seq = 2;
  if (has_seq()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->seq(), output);
  }

  // optional uint64 fromuin = 3;
  if (has_fromuin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->fromuin(), output);
  }

  // optional uint64 touin = 4;
  if (has_touin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->touin(), output);
  }

  // optional uint32 service = 5;
  if (has_service()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->service(), output);
  }

  // optional uint32 session_type = 6;
  if (has_session_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->session_type(), output);
  }

  // optional bytes session_key = 7;
  if (has_session_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->session_key(), output);
  }

  // optional uint32 client_ip = 8;
  if (has_client_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->client_ip(), output);
  }

  // optional .SummaryCardBusiEntry.ui display = 9;
  if (has_display()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->display(), output);
  }

  // optional uint32 result = 10;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->result(), output);
  }

  // optional string err_msg = 11;
  if (has_err_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->err_msg().data(), this->err_msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->err_msg(), output);
  }

  // optional uint32 platform = 12;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->platform(), output);
  }

  // optional string qqver = 13;
  if (has_qqver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->qqver().data(), this->qqver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->qqver(), output);
  }

  // optional int32 build = 14;
  if (has_build()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->build(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* comm::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ver = 1;
  if (has_ver()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ver(), target);
  }

  // optional uint32 seq = 2;
  if (has_seq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->seq(), target);
  }

  // optional uint64 fromuin = 3;
  if (has_fromuin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->fromuin(), target);
  }

  // optional uint64 touin = 4;
  if (has_touin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->touin(), target);
  }

  // optional uint32 service = 5;
  if (has_service()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->service(), target);
  }

  // optional uint32 session_type = 6;
  if (has_session_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->session_type(), target);
  }

  // optional bytes session_key = 7;
  if (has_session_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->session_key(), target);
  }

  // optional uint32 client_ip = 8;
  if (has_client_ip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->client_ip(), target);
  }

  // optional .SummaryCardBusiEntry.ui display = 9;
  if (has_display()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->display(), target);
  }

  // optional uint32 result = 10;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->result(), target);
  }

  // optional string err_msg = 11;
  if (has_err_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->err_msg().data(), this->err_msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->err_msg(), target);
  }

  // optional uint32 platform = 12;
  if (has_platform()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->platform(), target);
  }

  // optional string qqver = 13;
  if (has_qqver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->qqver().data(), this->qqver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->qqver(), target);
  }

  // optional int32 build = 14;
  if (has_build()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->build(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int comm::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ver = 1;
    if (has_ver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ver());
    }

    // optional uint32 seq = 2;
    if (has_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seq());
    }

    // optional uint64 fromuin = 3;
    if (has_fromuin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fromuin());
    }

    // optional uint64 touin = 4;
    if (has_touin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->touin());
    }

    // optional uint32 service = 5;
    if (has_service()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->service());
    }

    // optional uint32 session_type = 6;
    if (has_session_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->session_type());
    }

    // optional bytes session_key = 7;
    if (has_session_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->session_key());
    }

    // optional uint32 client_ip = 8;
    if (has_client_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_ip());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .SummaryCardBusiEntry.ui display = 9;
    if (has_display()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->display());
    }

    // optional uint32 result = 10;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

    // optional string err_msg = 11;
    if (has_err_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->err_msg());
    }

    // optional uint32 platform = 12;
    if (has_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->platform());
    }

    // optional string qqver = 13;
    if (has_qqver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->qqver());
    }

    // optional int32 build = 14;
    if (has_build()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->build());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void comm::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const comm* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const comm*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void comm::MergeFrom(const comm& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ver()) {
      set_ver(from.ver());
    }
    if (from.has_seq()) {
      set_seq(from.seq());
    }
    if (from.has_fromuin()) {
      set_fromuin(from.fromuin());
    }
    if (from.has_touin()) {
      set_touin(from.touin());
    }
    if (from.has_service()) {
      set_service(from.service());
    }
    if (from.has_session_type()) {
      set_session_type(from.session_type());
    }
    if (from.has_session_key()) {
      set_session_key(from.session_key());
    }
    if (from.has_client_ip()) {
      set_client_ip(from.client_ip());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_display()) {
      mutable_display()->::SummaryCardBusiEntry::ui::MergeFrom(from.display());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_err_msg()) {
      set_err_msg(from.err_msg());
    }
    if (from.has_platform()) {
      set_platform(from.platform());
    }
    if (from.has_qqver()) {
      set_qqver(from.qqver());
    }
    if (from.has_build()) {
      set_build(from.build());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void comm::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void comm::CopyFrom(const comm& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool comm::IsInitialized() const {

  return true;
}

void comm::Swap(comm* other) {
  if (other != this) {
    std::swap(ver_, other->ver_);
    std::swap(seq_, other->seq_);
    std::swap(fromuin_, other->fromuin_);
    std::swap(touin_, other->touin_);
    std::swap(service_, other->service_);
    std::swap(session_type_, other->session_type_);
    std::swap(session_key_, other->session_key_);
    std::swap(client_ip_, other->client_ip_);
    std::swap(display_, other->display_);
    std::swap(result_, other->result_);
    std::swap(err_msg_, other->err_msg_);
    std::swap(platform_, other->platform_);
    std::swap(qqver_, other->qqver_);
    std::swap(build_, other->build_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata comm::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = comm_descriptor_;
  metadata.reflection = comm_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace SummaryCardBusiEntry

// @@protoc_insertion_point(global_scope)
