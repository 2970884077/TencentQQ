// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: comm.proto

#ifndef PROTOBUF_comm_2eproto__INCLUDED
#define PROTOBUF_comm_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "ui.pb.h"
// @@protoc_insertion_point(includes)

namespace SummaryCardBusiEntry {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_comm_2eproto();
void protobuf_AssignDesc_comm_2eproto();
void protobuf_ShutdownFile_comm_2eproto();

class comm;

// ===================================================================

class comm : public ::google::protobuf::Message {
 public:
  comm();
  virtual ~comm();

  comm(const comm& from);

  inline comm& operator=(const comm& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const comm& default_instance();

  void Swap(comm* other);

  // implements Message ----------------------------------------------

  comm* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const comm& from);
  void MergeFrom(const comm& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ver = 1;
  inline bool has_ver() const;
  inline void clear_ver();
  static const int kVerFieldNumber = 1;
  inline ::google::protobuf::uint32 ver() const;
  inline void set_ver(::google::protobuf::uint32 value);

  // optional uint32 seq = 2;
  inline bool has_seq() const;
  inline void clear_seq();
  static const int kSeqFieldNumber = 2;
  inline ::google::protobuf::uint32 seq() const;
  inline void set_seq(::google::protobuf::uint32 value);

  // optional uint64 fromuin = 3;
  inline bool has_fromuin() const;
  inline void clear_fromuin();
  static const int kFromuinFieldNumber = 3;
  inline ::google::protobuf::uint64 fromuin() const;
  inline void set_fromuin(::google::protobuf::uint64 value);

  // optional uint64 touin = 4;
  inline bool has_touin() const;
  inline void clear_touin();
  static const int kTouinFieldNumber = 4;
  inline ::google::protobuf::uint64 touin() const;
  inline void set_touin(::google::protobuf::uint64 value);

  // optional uint32 service = 5;
  inline bool has_service() const;
  inline void clear_service();
  static const int kServiceFieldNumber = 5;
  inline ::google::protobuf::uint32 service() const;
  inline void set_service(::google::protobuf::uint32 value);

  // optional uint32 session_type = 6;
  inline bool has_session_type() const;
  inline void clear_session_type();
  static const int kSessionTypeFieldNumber = 6;
  inline ::google::protobuf::uint32 session_type() const;
  inline void set_session_type(::google::protobuf::uint32 value);

  // optional bytes session_key = 7;
  inline bool has_session_key() const;
  inline void clear_session_key();
  static const int kSessionKeyFieldNumber = 7;
  inline const ::std::string& session_key() const;
  inline void set_session_key(const ::std::string& value);
  inline void set_session_key(const char* value);
  inline void set_session_key(const void* value, size_t size);
  inline ::std::string* mutable_session_key();
  inline ::std::string* release_session_key();
  inline void set_allocated_session_key(::std::string* session_key);

  // optional uint32 client_ip = 8;
  inline bool has_client_ip() const;
  inline void clear_client_ip();
  static const int kClientIpFieldNumber = 8;
  inline ::google::protobuf::uint32 client_ip() const;
  inline void set_client_ip(::google::protobuf::uint32 value);

  // optional .SummaryCardBusiEntry.ui display = 9;
  inline bool has_display() const;
  inline void clear_display();
  static const int kDisplayFieldNumber = 9;
  inline const ::SummaryCardBusiEntry::ui& display() const;
  inline ::SummaryCardBusiEntry::ui* mutable_display();
  inline ::SummaryCardBusiEntry::ui* release_display();
  inline void set_allocated_display(::SummaryCardBusiEntry::ui* display);

  // optional uint32 result = 10;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 10;
  inline ::google::protobuf::uint32 result() const;
  inline void set_result(::google::protobuf::uint32 value);

  // optional string err_msg = 11;
  inline bool has_err_msg() const;
  inline void clear_err_msg();
  static const int kErrMsgFieldNumber = 11;
  inline const ::std::string& err_msg() const;
  inline void set_err_msg(const ::std::string& value);
  inline void set_err_msg(const char* value);
  inline void set_err_msg(const char* value, size_t size);
  inline ::std::string* mutable_err_msg();
  inline ::std::string* release_err_msg();
  inline void set_allocated_err_msg(::std::string* err_msg);

  // optional uint32 platform = 12;
  inline bool has_platform() const;
  inline void clear_platform();
  static const int kPlatformFieldNumber = 12;
  inline ::google::protobuf::uint32 platform() const;
  inline void set_platform(::google::protobuf::uint32 value);

  // optional string qqver = 13;
  inline bool has_qqver() const;
  inline void clear_qqver();
  static const int kQqverFieldNumber = 13;
  inline const ::std::string& qqver() const;
  inline void set_qqver(const ::std::string& value);
  inline void set_qqver(const char* value);
  inline void set_qqver(const char* value, size_t size);
  inline ::std::string* mutable_qqver();
  inline ::std::string* release_qqver();
  inline void set_allocated_qqver(::std::string* qqver);

  // optional int32 build = 14;
  inline bool has_build() const;
  inline void clear_build();
  static const int kBuildFieldNumber = 14;
  inline ::google::protobuf::int32 build() const;
  inline void set_build(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SummaryCardBusiEntry.comm)
 private:
  inline void set_has_ver();
  inline void clear_has_ver();
  inline void set_has_seq();
  inline void clear_has_seq();
  inline void set_has_fromuin();
  inline void clear_has_fromuin();
  inline void set_has_touin();
  inline void clear_has_touin();
  inline void set_has_service();
  inline void clear_has_service();
  inline void set_has_session_type();
  inline void clear_has_session_type();
  inline void set_has_session_key();
  inline void clear_has_session_key();
  inline void set_has_client_ip();
  inline void clear_has_client_ip();
  inline void set_has_display();
  inline void clear_has_display();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_err_msg();
  inline void clear_has_err_msg();
  inline void set_has_platform();
  inline void clear_has_platform();
  inline void set_has_qqver();
  inline void clear_has_qqver();
  inline void set_has_build();
  inline void clear_has_build();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 ver_;
  ::google::protobuf::uint32 seq_;
  ::google::protobuf::uint64 fromuin_;
  ::google::protobuf::uint64 touin_;
  ::google::protobuf::uint32 service_;
  ::google::protobuf::uint32 session_type_;
  ::std::string* session_key_;
  ::SummaryCardBusiEntry::ui* display_;
  ::google::protobuf::uint32 client_ip_;
  ::google::protobuf::uint32 result_;
  ::std::string* err_msg_;
  ::std::string* qqver_;
  ::google::protobuf::uint32 platform_;
  ::google::protobuf::int32 build_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(14 + 31) / 32];

  friend void  protobuf_AddDesc_comm_2eproto();
  friend void protobuf_AssignDesc_comm_2eproto();
  friend void protobuf_ShutdownFile_comm_2eproto();

  void InitAsDefaultInstance();
  static comm* default_instance_;
};
// ===================================================================


// ===================================================================

// comm

// optional uint32 ver = 1;
inline bool comm::has_ver() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void comm::set_has_ver() {
  _has_bits_[0] |= 0x00000001u;
}
inline void comm::clear_has_ver() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void comm::clear_ver() {
  ver_ = 0u;
  clear_has_ver();
}
inline ::google::protobuf::uint32 comm::ver() const {
  return ver_;
}
inline void comm::set_ver(::google::protobuf::uint32 value) {
  set_has_ver();
  ver_ = value;
}

// optional uint32 seq = 2;
inline bool comm::has_seq() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void comm::set_has_seq() {
  _has_bits_[0] |= 0x00000002u;
}
inline void comm::clear_has_seq() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void comm::clear_seq() {
  seq_ = 0u;
  clear_has_seq();
}
inline ::google::protobuf::uint32 comm::seq() const {
  return seq_;
}
inline void comm::set_seq(::google::protobuf::uint32 value) {
  set_has_seq();
  seq_ = value;
}

// optional uint64 fromuin = 3;
inline bool comm::has_fromuin() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void comm::set_has_fromuin() {
  _has_bits_[0] |= 0x00000004u;
}
inline void comm::clear_has_fromuin() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void comm::clear_fromuin() {
  fromuin_ = GOOGLE_ULONGLONG(0);
  clear_has_fromuin();
}
inline ::google::protobuf::uint64 comm::fromuin() const {
  return fromuin_;
}
inline void comm::set_fromuin(::google::protobuf::uint64 value) {
  set_has_fromuin();
  fromuin_ = value;
}

// optional uint64 touin = 4;
inline bool comm::has_touin() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void comm::set_has_touin() {
  _has_bits_[0] |= 0x00000008u;
}
inline void comm::clear_has_touin() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void comm::clear_touin() {
  touin_ = GOOGLE_ULONGLONG(0);
  clear_has_touin();
}
inline ::google::protobuf::uint64 comm::touin() const {
  return touin_;
}
inline void comm::set_touin(::google::protobuf::uint64 value) {
  set_has_touin();
  touin_ = value;
}

// optional uint32 service = 5;
inline bool comm::has_service() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void comm::set_has_service() {
  _has_bits_[0] |= 0x00000010u;
}
inline void comm::clear_has_service() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void comm::clear_service() {
  service_ = 0u;
  clear_has_service();
}
inline ::google::protobuf::uint32 comm::service() const {
  return service_;
}
inline void comm::set_service(::google::protobuf::uint32 value) {
  set_has_service();
  service_ = value;
}

// optional uint32 session_type = 6;
inline bool comm::has_session_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void comm::set_has_session_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void comm::clear_has_session_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void comm::clear_session_type() {
  session_type_ = 0u;
  clear_has_session_type();
}
inline ::google::protobuf::uint32 comm::session_type() const {
  return session_type_;
}
inline void comm::set_session_type(::google::protobuf::uint32 value) {
  set_has_session_type();
  session_type_ = value;
}

// optional bytes session_key = 7;
inline bool comm::has_session_key() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void comm::set_has_session_key() {
  _has_bits_[0] |= 0x00000040u;
}
inline void comm::clear_has_session_key() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void comm::clear_session_key() {
  if (session_key_ != &::google::protobuf::internal::kEmptyString) {
    session_key_->clear();
  }
  clear_has_session_key();
}
inline const ::std::string& comm::session_key() const {
  return *session_key_;
}
inline void comm::set_session_key(const ::std::string& value) {
  set_has_session_key();
  if (session_key_ == &::google::protobuf::internal::kEmptyString) {
    session_key_ = new ::std::string;
  }
  session_key_->assign(value);
}
inline void comm::set_session_key(const char* value) {
  set_has_session_key();
  if (session_key_ == &::google::protobuf::internal::kEmptyString) {
    session_key_ = new ::std::string;
  }
  session_key_->assign(value);
}
inline void comm::set_session_key(const void* value, size_t size) {
  set_has_session_key();
  if (session_key_ == &::google::protobuf::internal::kEmptyString) {
    session_key_ = new ::std::string;
  }
  session_key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* comm::mutable_session_key() {
  set_has_session_key();
  if (session_key_ == &::google::protobuf::internal::kEmptyString) {
    session_key_ = new ::std::string;
  }
  return session_key_;
}
inline ::std::string* comm::release_session_key() {
  clear_has_session_key();
  if (session_key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = session_key_;
    session_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void comm::set_allocated_session_key(::std::string* session_key) {
  if (session_key_ != &::google::protobuf::internal::kEmptyString) {
    delete session_key_;
  }
  if (session_key) {
    set_has_session_key();
    session_key_ = session_key;
  } else {
    clear_has_session_key();
    session_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 client_ip = 8;
inline bool comm::has_client_ip() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void comm::set_has_client_ip() {
  _has_bits_[0] |= 0x00000080u;
}
inline void comm::clear_has_client_ip() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void comm::clear_client_ip() {
  client_ip_ = 0u;
  clear_has_client_ip();
}
inline ::google::protobuf::uint32 comm::client_ip() const {
  return client_ip_;
}
inline void comm::set_client_ip(::google::protobuf::uint32 value) {
  set_has_client_ip();
  client_ip_ = value;
}

// optional .SummaryCardBusiEntry.ui display = 9;
inline bool comm::has_display() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void comm::set_has_display() {
  _has_bits_[0] |= 0x00000100u;
}
inline void comm::clear_has_display() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void comm::clear_display() {
  if (display_ != NULL) display_->::SummaryCardBusiEntry::ui::Clear();
  clear_has_display();
}
inline const ::SummaryCardBusiEntry::ui& comm::display() const {
  return display_ != NULL ? *display_ : *default_instance_->display_;
}
inline ::SummaryCardBusiEntry::ui* comm::mutable_display() {
  set_has_display();
  if (display_ == NULL) display_ = new ::SummaryCardBusiEntry::ui;
  return display_;
}
inline ::SummaryCardBusiEntry::ui* comm::release_display() {
  clear_has_display();
  ::SummaryCardBusiEntry::ui* temp = display_;
  display_ = NULL;
  return temp;
}
inline void comm::set_allocated_display(::SummaryCardBusiEntry::ui* display) {
  delete display_;
  display_ = display;
  if (display) {
    set_has_display();
  } else {
    clear_has_display();
  }
}

// optional uint32 result = 10;
inline bool comm::has_result() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void comm::set_has_result() {
  _has_bits_[0] |= 0x00000200u;
}
inline void comm::clear_has_result() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void comm::clear_result() {
  result_ = 0u;
  clear_has_result();
}
inline ::google::protobuf::uint32 comm::result() const {
  return result_;
}
inline void comm::set_result(::google::protobuf::uint32 value) {
  set_has_result();
  result_ = value;
}

// optional string err_msg = 11;
inline bool comm::has_err_msg() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void comm::set_has_err_msg() {
  _has_bits_[0] |= 0x00000400u;
}
inline void comm::clear_has_err_msg() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void comm::clear_err_msg() {
  if (err_msg_ != &::google::protobuf::internal::kEmptyString) {
    err_msg_->clear();
  }
  clear_has_err_msg();
}
inline const ::std::string& comm::err_msg() const {
  return *err_msg_;
}
inline void comm::set_err_msg(const ::std::string& value) {
  set_has_err_msg();
  if (err_msg_ == &::google::protobuf::internal::kEmptyString) {
    err_msg_ = new ::std::string;
  }
  err_msg_->assign(value);
}
inline void comm::set_err_msg(const char* value) {
  set_has_err_msg();
  if (err_msg_ == &::google::protobuf::internal::kEmptyString) {
    err_msg_ = new ::std::string;
  }
  err_msg_->assign(value);
}
inline void comm::set_err_msg(const char* value, size_t size) {
  set_has_err_msg();
  if (err_msg_ == &::google::protobuf::internal::kEmptyString) {
    err_msg_ = new ::std::string;
  }
  err_msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* comm::mutable_err_msg() {
  set_has_err_msg();
  if (err_msg_ == &::google::protobuf::internal::kEmptyString) {
    err_msg_ = new ::std::string;
  }
  return err_msg_;
}
inline ::std::string* comm::release_err_msg() {
  clear_has_err_msg();
  if (err_msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = err_msg_;
    err_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void comm::set_allocated_err_msg(::std::string* err_msg) {
  if (err_msg_ != &::google::protobuf::internal::kEmptyString) {
    delete err_msg_;
  }
  if (err_msg) {
    set_has_err_msg();
    err_msg_ = err_msg;
  } else {
    clear_has_err_msg();
    err_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 platform = 12;
inline bool comm::has_platform() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void comm::set_has_platform() {
  _has_bits_[0] |= 0x00000800u;
}
inline void comm::clear_has_platform() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void comm::clear_platform() {
  platform_ = 0u;
  clear_has_platform();
}
inline ::google::protobuf::uint32 comm::platform() const {
  return platform_;
}
inline void comm::set_platform(::google::protobuf::uint32 value) {
  set_has_platform();
  platform_ = value;
}

// optional string qqver = 13;
inline bool comm::has_qqver() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void comm::set_has_qqver() {
  _has_bits_[0] |= 0x00001000u;
}
inline void comm::clear_has_qqver() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void comm::clear_qqver() {
  if (qqver_ != &::google::protobuf::internal::kEmptyString) {
    qqver_->clear();
  }
  clear_has_qqver();
}
inline const ::std::string& comm::qqver() const {
  return *qqver_;
}
inline void comm::set_qqver(const ::std::string& value) {
  set_has_qqver();
  if (qqver_ == &::google::protobuf::internal::kEmptyString) {
    qqver_ = new ::std::string;
  }
  qqver_->assign(value);
}
inline void comm::set_qqver(const char* value) {
  set_has_qqver();
  if (qqver_ == &::google::protobuf::internal::kEmptyString) {
    qqver_ = new ::std::string;
  }
  qqver_->assign(value);
}
inline void comm::set_qqver(const char* value, size_t size) {
  set_has_qqver();
  if (qqver_ == &::google::protobuf::internal::kEmptyString) {
    qqver_ = new ::std::string;
  }
  qqver_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* comm::mutable_qqver() {
  set_has_qqver();
  if (qqver_ == &::google::protobuf::internal::kEmptyString) {
    qqver_ = new ::std::string;
  }
  return qqver_;
}
inline ::std::string* comm::release_qqver() {
  clear_has_qqver();
  if (qqver_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = qqver_;
    qqver_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void comm::set_allocated_qqver(::std::string* qqver) {
  if (qqver_ != &::google::protobuf::internal::kEmptyString) {
    delete qqver_;
  }
  if (qqver) {
    set_has_qqver();
    qqver_ = qqver;
  } else {
    clear_has_qqver();
    qqver_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 build = 14;
inline bool comm::has_build() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void comm::set_has_build() {
  _has_bits_[0] |= 0x00002000u;
}
inline void comm::clear_has_build() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void comm::clear_build() {
  build_ = 0;
  clear_has_build();
}
inline ::google::protobuf::int32 comm::build() const {
  return build_;
}
inline void comm::set_build(::google::protobuf::int32 value) {
  set_has_build();
  build_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace SummaryCardBusiEntry

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_comm_2eproto__INCLUDED
