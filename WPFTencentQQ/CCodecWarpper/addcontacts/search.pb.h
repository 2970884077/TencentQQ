// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: search.proto

#ifndef PROTOBUF_search_2eproto__INCLUDED
#define PROTOBUF_search_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "record.pb.h"
#include "Location.pb.h"
// @@protoc_insertion_point(includes)

namespace AccountSearchPb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_search_2eproto();
void protobuf_AssignDesc_search_2eproto();
void protobuf_ShutdownFile_search_2eproto();

class search;

// ===================================================================

class search : public ::google::protobuf::Message {
 public:
  search();
  virtual ~search();

  search(const search& from);

  inline search& operator=(const search& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const search& default_instance();

  void Swap(search* other);

  // implements Message ----------------------------------------------

  search* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const search& from);
  void MergeFrom(const search& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 start = 1;
  inline bool has_start() const;
  inline void clear_start();
  static const int kStartFieldNumber = 1;
  inline ::google::protobuf::int32 start() const;
  inline void set_start(::google::protobuf::int32 value);

  // optional uint32 count = 2;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 2;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);

  // optional uint32 end = 3;
  inline bool has_end() const;
  inline void clear_end();
  static const int kEndFieldNumber = 3;
  inline ::google::protobuf::uint32 end() const;
  inline void set_end(::google::protobuf::uint32 value);

  // optional string keyword = 4;
  inline bool has_keyword() const;
  inline void clear_keyword();
  static const int kKeywordFieldNumber = 4;
  inline const ::std::string& keyword() const;
  inline void set_keyword(const ::std::string& value);
  inline void set_keyword(const char* value);
  inline void set_keyword(const char* value, size_t size);
  inline ::std::string* mutable_keyword();
  inline ::std::string* release_keyword();
  inline void set_allocated_keyword(::std::string* keyword);

  // repeated .AccountSearchPb.record list = 5;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 5;
  inline const ::AccountSearchPb::record& list(int index) const;
  inline ::AccountSearchPb::record* mutable_list(int index);
  inline ::AccountSearchPb::record* add_list();
  inline const ::google::protobuf::RepeatedPtrField< ::AccountSearchPb::record >&
      list() const;
  inline ::google::protobuf::RepeatedPtrField< ::AccountSearchPb::record >*
      mutable_list();

  // repeated string highlight = 6;
  inline int highlight_size() const;
  inline void clear_highlight();
  static const int kHighlightFieldNumber = 6;
  inline const ::std::string& highlight(int index) const;
  inline ::std::string* mutable_highlight(int index);
  inline void set_highlight(int index, const ::std::string& value);
  inline void set_highlight(int index, const char* value);
  inline void set_highlight(int index, const char* value, size_t size);
  inline ::std::string* add_highlight();
  inline void add_highlight(const ::std::string& value);
  inline void add_highlight(const char* value);
  inline void add_highlight(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& highlight() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_highlight();

  // optional .AccountSearchPb.Location msg_user_location = 10;
  inline bool has_msg_user_location() const;
  inline void clear_msg_user_location();
  static const int kMsgUserLocationFieldNumber = 10;
  inline const ::AccountSearchPb::Location& msg_user_location() const;
  inline ::AccountSearchPb::Location* mutable_msg_user_location();
  inline ::AccountSearchPb::Location* release_msg_user_location();
  inline void set_allocated_msg_user_location(::AccountSearchPb::Location* msg_user_location);

  // optional bool bool_location_group = 11 [default = false];
  inline bool has_bool_location_group() const;
  inline void clear_bool_location_group();
  static const int kBoolLocationGroupFieldNumber = 11;
  inline bool bool_location_group() const;
  inline void set_bool_location_group(bool value);

  // @@protoc_insertion_point(class_scope:AccountSearchPb.search)
 private:
  inline void set_has_start();
  inline void clear_has_start();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_end();
  inline void clear_has_end();
  inline void set_has_keyword();
  inline void clear_has_keyword();
  inline void set_has_msg_user_location();
  inline void clear_has_msg_user_location();
  inline void set_has_bool_location_group();
  inline void clear_has_bool_location_group();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 start_;
  ::google::protobuf::uint32 count_;
  ::std::string* keyword_;
  ::google::protobuf::RepeatedPtrField< ::AccountSearchPb::record > list_;
  ::google::protobuf::uint32 end_;
  bool bool_location_group_;
  ::google::protobuf::RepeatedPtrField< ::std::string> highlight_;
  ::AccountSearchPb::Location* msg_user_location_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_search_2eproto();
  friend void protobuf_AssignDesc_search_2eproto();
  friend void protobuf_ShutdownFile_search_2eproto();

  void InitAsDefaultInstance();
  static search* default_instance_;
};
// ===================================================================


// ===================================================================

// search

// optional int32 start = 1;
inline bool search::has_start() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void search::set_has_start() {
  _has_bits_[0] |= 0x00000001u;
}
inline void search::clear_has_start() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void search::clear_start() {
  start_ = 0;
  clear_has_start();
}
inline ::google::protobuf::int32 search::start() const {
  return start_;
}
inline void search::set_start(::google::protobuf::int32 value) {
  set_has_start();
  start_ = value;
}

// optional uint32 count = 2;
inline bool search::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void search::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void search::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void search::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 search::count() const {
  return count_;
}
inline void search::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
}

// optional uint32 end = 3;
inline bool search::has_end() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void search::set_has_end() {
  _has_bits_[0] |= 0x00000004u;
}
inline void search::clear_has_end() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void search::clear_end() {
  end_ = 0u;
  clear_has_end();
}
inline ::google::protobuf::uint32 search::end() const {
  return end_;
}
inline void search::set_end(::google::protobuf::uint32 value) {
  set_has_end();
  end_ = value;
}

// optional string keyword = 4;
inline bool search::has_keyword() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void search::set_has_keyword() {
  _has_bits_[0] |= 0x00000008u;
}
inline void search::clear_has_keyword() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void search::clear_keyword() {
  if (keyword_ != &::google::protobuf::internal::kEmptyString) {
    keyword_->clear();
  }
  clear_has_keyword();
}
inline const ::std::string& search::keyword() const {
  return *keyword_;
}
inline void search::set_keyword(const ::std::string& value) {
  set_has_keyword();
  if (keyword_ == &::google::protobuf::internal::kEmptyString) {
    keyword_ = new ::std::string;
  }
  keyword_->assign(value);
}
inline void search::set_keyword(const char* value) {
  set_has_keyword();
  if (keyword_ == &::google::protobuf::internal::kEmptyString) {
    keyword_ = new ::std::string;
  }
  keyword_->assign(value);
}
inline void search::set_keyword(const char* value, size_t size) {
  set_has_keyword();
  if (keyword_ == &::google::protobuf::internal::kEmptyString) {
    keyword_ = new ::std::string;
  }
  keyword_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* search::mutable_keyword() {
  set_has_keyword();
  if (keyword_ == &::google::protobuf::internal::kEmptyString) {
    keyword_ = new ::std::string;
  }
  return keyword_;
}
inline ::std::string* search::release_keyword() {
  clear_has_keyword();
  if (keyword_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = keyword_;
    keyword_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void search::set_allocated_keyword(::std::string* keyword) {
  if (keyword_ != &::google::protobuf::internal::kEmptyString) {
    delete keyword_;
  }
  if (keyword) {
    set_has_keyword();
    keyword_ = keyword;
  } else {
    clear_has_keyword();
    keyword_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .AccountSearchPb.record list = 5;
inline int search::list_size() const {
  return list_.size();
}
inline void search::clear_list() {
  list_.Clear();
}
inline const ::AccountSearchPb::record& search::list(int index) const {
  return list_.Get(index);
}
inline ::AccountSearchPb::record* search::mutable_list(int index) {
  return list_.Mutable(index);
}
inline ::AccountSearchPb::record* search::add_list() {
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AccountSearchPb::record >&
search::list() const {
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::AccountSearchPb::record >*
search::mutable_list() {
  return &list_;
}

// repeated string highlight = 6;
inline int search::highlight_size() const {
  return highlight_.size();
}
inline void search::clear_highlight() {
  highlight_.Clear();
}
inline const ::std::string& search::highlight(int index) const {
  return highlight_.Get(index);
}
inline ::std::string* search::mutable_highlight(int index) {
  return highlight_.Mutable(index);
}
inline void search::set_highlight(int index, const ::std::string& value) {
  highlight_.Mutable(index)->assign(value);
}
inline void search::set_highlight(int index, const char* value) {
  highlight_.Mutable(index)->assign(value);
}
inline void search::set_highlight(int index, const char* value, size_t size) {
  highlight_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* search::add_highlight() {
  return highlight_.Add();
}
inline void search::add_highlight(const ::std::string& value) {
  highlight_.Add()->assign(value);
}
inline void search::add_highlight(const char* value) {
  highlight_.Add()->assign(value);
}
inline void search::add_highlight(const char* value, size_t size) {
  highlight_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
search::highlight() const {
  return highlight_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
search::mutable_highlight() {
  return &highlight_;
}

// optional .AccountSearchPb.Location msg_user_location = 10;
inline bool search::has_msg_user_location() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void search::set_has_msg_user_location() {
  _has_bits_[0] |= 0x00000040u;
}
inline void search::clear_has_msg_user_location() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void search::clear_msg_user_location() {
  if (msg_user_location_ != NULL) msg_user_location_->::AccountSearchPb::Location::Clear();
  clear_has_msg_user_location();
}
inline const ::AccountSearchPb::Location& search::msg_user_location() const {
  return msg_user_location_ != NULL ? *msg_user_location_ : *default_instance_->msg_user_location_;
}
inline ::AccountSearchPb::Location* search::mutable_msg_user_location() {
  set_has_msg_user_location();
  if (msg_user_location_ == NULL) msg_user_location_ = new ::AccountSearchPb::Location;
  return msg_user_location_;
}
inline ::AccountSearchPb::Location* search::release_msg_user_location() {
  clear_has_msg_user_location();
  ::AccountSearchPb::Location* temp = msg_user_location_;
  msg_user_location_ = NULL;
  return temp;
}
inline void search::set_allocated_msg_user_location(::AccountSearchPb::Location* msg_user_location) {
  delete msg_user_location_;
  msg_user_location_ = msg_user_location;
  if (msg_user_location) {
    set_has_msg_user_location();
  } else {
    clear_has_msg_user_location();
  }
}

// optional bool bool_location_group = 11 [default = false];
inline bool search::has_bool_location_group() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void search::set_has_bool_location_group() {
  _has_bits_[0] |= 0x00000080u;
}
inline void search::clear_has_bool_location_group() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void search::clear_bool_location_group() {
  bool_location_group_ = false;
  clear_has_bool_location_group();
}
inline bool search::bool_location_group() const {
  return bool_location_group_;
}
inline void search::set_bool_location_group(bool value) {
  set_has_bool_location_group();
  bool_location_group_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace AccountSearchPb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_search_2eproto__INCLUDED
