// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Label.proto

#ifndef PROTOBUF_Label_2eproto__INCLUDED
#define PROTOBUF_Label_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "Color.pb.h"
// @@protoc_insertion_point(includes)

namespace AccountSearchPb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Label_2eproto();
void protobuf_AssignDesc_Label_2eproto();
void protobuf_ShutdownFile_Label_2eproto();

class Label;

// ===================================================================

class Label : public ::google::protobuf::Message {
 public:
  Label();
  virtual ~Label();

  Label(const Label& from);

  inline Label& operator=(const Label& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Label& default_instance();

  void Swap(Label* other);

  // implements Message ----------------------------------------------

  Label* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Label& from);
  void MergeFrom(const Label& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes bytes_name = 1;
  inline bool has_bytes_name() const;
  inline void clear_bytes_name();
  static const int kBytesNameFieldNumber = 1;
  inline const ::std::string& bytes_name() const;
  inline void set_bytes_name(const ::std::string& value);
  inline void set_bytes_name(const char* value);
  inline void set_bytes_name(const void* value, size_t size);
  inline ::std::string* mutable_bytes_name();
  inline ::std::string* release_bytes_name();
  inline void set_allocated_bytes_name(::std::string* bytes_name);

  // optional .AccountSearchPb.Color text_color = 2;
  inline bool has_text_color() const;
  inline void clear_text_color();
  static const int kTextColorFieldNumber = 2;
  inline const ::AccountSearchPb::Color& text_color() const;
  inline ::AccountSearchPb::Color* mutable_text_color();
  inline ::AccountSearchPb::Color* release_text_color();
  inline void set_allocated_text_color(::AccountSearchPb::Color* text_color);

  // optional .AccountSearchPb.Color edging_color = 3;
  inline bool has_edging_color() const;
  inline void clear_edging_color();
  static const int kEdgingColorFieldNumber = 3;
  inline const ::AccountSearchPb::Color& edging_color() const;
  inline ::AccountSearchPb::Color* mutable_edging_color();
  inline ::AccountSearchPb::Color* release_edging_color();
  inline void set_allocated_edging_color(::AccountSearchPb::Color* edging_color);

  // optional uint32 uint32_label_attr = 4;
  inline bool has_uint32_label_attr() const;
  inline void clear_uint32_label_attr();
  static const int kUint32LabelAttrFieldNumber = 4;
  inline ::google::protobuf::uint32 uint32_label_attr() const;
  inline void set_uint32_label_attr(::google::protobuf::uint32 value);

  // optional uint32 uint32_label_type = 5;
  inline bool has_uint32_label_type() const;
  inline void clear_uint32_label_type();
  static const int kUint32LabelTypeFieldNumber = 5;
  inline ::google::protobuf::uint32 uint32_label_type() const;
  inline void set_uint32_label_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:AccountSearchPb.Label)
 private:
  inline void set_has_bytes_name();
  inline void clear_has_bytes_name();
  inline void set_has_text_color();
  inline void clear_has_text_color();
  inline void set_has_edging_color();
  inline void clear_has_edging_color();
  inline void set_has_uint32_label_attr();
  inline void clear_has_uint32_label_attr();
  inline void set_has_uint32_label_type();
  inline void clear_has_uint32_label_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* bytes_name_;
  ::AccountSearchPb::Color* text_color_;
  ::AccountSearchPb::Color* edging_color_;
  ::google::protobuf::uint32 uint32_label_attr_;
  ::google::protobuf::uint32 uint32_label_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Label_2eproto();
  friend void protobuf_AssignDesc_Label_2eproto();
  friend void protobuf_ShutdownFile_Label_2eproto();

  void InitAsDefaultInstance();
  static Label* default_instance_;
};
// ===================================================================


// ===================================================================

// Label

// optional bytes bytes_name = 1;
inline bool Label::has_bytes_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Label::set_has_bytes_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Label::clear_has_bytes_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Label::clear_bytes_name() {
  if (bytes_name_ != &::google::protobuf::internal::kEmptyString) {
    bytes_name_->clear();
  }
  clear_has_bytes_name();
}
inline const ::std::string& Label::bytes_name() const {
  return *bytes_name_;
}
inline void Label::set_bytes_name(const ::std::string& value) {
  set_has_bytes_name();
  if (bytes_name_ == &::google::protobuf::internal::kEmptyString) {
    bytes_name_ = new ::std::string;
  }
  bytes_name_->assign(value);
}
inline void Label::set_bytes_name(const char* value) {
  set_has_bytes_name();
  if (bytes_name_ == &::google::protobuf::internal::kEmptyString) {
    bytes_name_ = new ::std::string;
  }
  bytes_name_->assign(value);
}
inline void Label::set_bytes_name(const void* value, size_t size) {
  set_has_bytes_name();
  if (bytes_name_ == &::google::protobuf::internal::kEmptyString) {
    bytes_name_ = new ::std::string;
  }
  bytes_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Label::mutable_bytes_name() {
  set_has_bytes_name();
  if (bytes_name_ == &::google::protobuf::internal::kEmptyString) {
    bytes_name_ = new ::std::string;
  }
  return bytes_name_;
}
inline ::std::string* Label::release_bytes_name() {
  clear_has_bytes_name();
  if (bytes_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bytes_name_;
    bytes_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Label::set_allocated_bytes_name(::std::string* bytes_name) {
  if (bytes_name_ != &::google::protobuf::internal::kEmptyString) {
    delete bytes_name_;
  }
  if (bytes_name) {
    set_has_bytes_name();
    bytes_name_ = bytes_name;
  } else {
    clear_has_bytes_name();
    bytes_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .AccountSearchPb.Color text_color = 2;
inline bool Label::has_text_color() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Label::set_has_text_color() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Label::clear_has_text_color() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Label::clear_text_color() {
  if (text_color_ != NULL) text_color_->::AccountSearchPb::Color::Clear();
  clear_has_text_color();
}
inline const ::AccountSearchPb::Color& Label::text_color() const {
  return text_color_ != NULL ? *text_color_ : *default_instance_->text_color_;
}
inline ::AccountSearchPb::Color* Label::mutable_text_color() {
  set_has_text_color();
  if (text_color_ == NULL) text_color_ = new ::AccountSearchPb::Color;
  return text_color_;
}
inline ::AccountSearchPb::Color* Label::release_text_color() {
  clear_has_text_color();
  ::AccountSearchPb::Color* temp = text_color_;
  text_color_ = NULL;
  return temp;
}
inline void Label::set_allocated_text_color(::AccountSearchPb::Color* text_color) {
  delete text_color_;
  text_color_ = text_color;
  if (text_color) {
    set_has_text_color();
  } else {
    clear_has_text_color();
  }
}

// optional .AccountSearchPb.Color edging_color = 3;
inline bool Label::has_edging_color() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Label::set_has_edging_color() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Label::clear_has_edging_color() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Label::clear_edging_color() {
  if (edging_color_ != NULL) edging_color_->::AccountSearchPb::Color::Clear();
  clear_has_edging_color();
}
inline const ::AccountSearchPb::Color& Label::edging_color() const {
  return edging_color_ != NULL ? *edging_color_ : *default_instance_->edging_color_;
}
inline ::AccountSearchPb::Color* Label::mutable_edging_color() {
  set_has_edging_color();
  if (edging_color_ == NULL) edging_color_ = new ::AccountSearchPb::Color;
  return edging_color_;
}
inline ::AccountSearchPb::Color* Label::release_edging_color() {
  clear_has_edging_color();
  ::AccountSearchPb::Color* temp = edging_color_;
  edging_color_ = NULL;
  return temp;
}
inline void Label::set_allocated_edging_color(::AccountSearchPb::Color* edging_color) {
  delete edging_color_;
  edging_color_ = edging_color;
  if (edging_color) {
    set_has_edging_color();
  } else {
    clear_has_edging_color();
  }
}

// optional uint32 uint32_label_attr = 4;
inline bool Label::has_uint32_label_attr() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Label::set_has_uint32_label_attr() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Label::clear_has_uint32_label_attr() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Label::clear_uint32_label_attr() {
  uint32_label_attr_ = 0u;
  clear_has_uint32_label_attr();
}
inline ::google::protobuf::uint32 Label::uint32_label_attr() const {
  return uint32_label_attr_;
}
inline void Label::set_uint32_label_attr(::google::protobuf::uint32 value) {
  set_has_uint32_label_attr();
  uint32_label_attr_ = value;
}

// optional uint32 uint32_label_type = 5;
inline bool Label::has_uint32_label_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Label::set_has_uint32_label_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Label::clear_has_uint32_label_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Label::clear_uint32_label_type() {
  uint32_label_type_ = 0u;
  clear_has_uint32_label_type();
}
inline ::google::protobuf::uint32 Label::uint32_label_type() const {
  return uint32_label_type_;
}
inline void Label::set_uint32_label_type(::google::protobuf::uint32 value) {
  set_has_uint32_label_type();
  uint32_label_type_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace AccountSearchPb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Label_2eproto__INCLUDED
