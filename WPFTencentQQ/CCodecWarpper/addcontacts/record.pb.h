// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: record.proto

#ifndef PROTOBUF_record_2eproto__INCLUDED
#define PROTOBUF_record_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "Label.pb.h"
// @@protoc_insertion_point(includes)

namespace AccountSearchPb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_record_2eproto();
void protobuf_AssignDesc_record_2eproto();
void protobuf_ShutdownFile_record_2eproto();

class record;

enum record_Source {
  record_Source_UNIVERSAL = 1
};
bool record_Source_IsValid(int value);
const record_Source record_Source_Source_MIN = record_Source_UNIVERSAL;
const record_Source record_Source_Source_MAX = record_Source_UNIVERSAL;
const int record_Source_Source_ARRAYSIZE = record_Source_Source_MAX + 1;

const ::google::protobuf::EnumDescriptor* record_Source_descriptor();
inline const ::std::string& record_Source_Name(record_Source value) {
  return ::google::protobuf::internal::NameOfEnum(
    record_Source_descriptor(), value);
}
inline bool record_Source_Parse(
    const ::std::string& name, record_Source* value) {
  return ::google::protobuf::internal::ParseNamedEnum<record_Source>(
    record_Source_descriptor(), name, value);
}
// ===================================================================

class record : public ::google::protobuf::Message {
 public:
  record();
  virtual ~record();

  record(const record& from);

  inline record& operator=(const record& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const record& default_instance();

  void Swap(record* other);

  // implements Message ----------------------------------------------

  record* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const record& from);
  void MergeFrom(const record& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef record_Source Source;
  static const Source UNIVERSAL = record_Source_UNIVERSAL;
  static inline bool Source_IsValid(int value) {
    return record_Source_IsValid(value);
  }
  static const Source Source_MIN =
    record_Source_Source_MIN;
  static const Source Source_MAX =
    record_Source_Source_MAX;
  static const int Source_ARRAYSIZE =
    record_Source_Source_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Source_descriptor() {
    return record_Source_descriptor();
  }
  static inline const ::std::string& Source_Name(Source value) {
    return record_Source_Name(value);
  }
  static inline bool Source_Parse(const ::std::string& name,
      Source* value) {
    return record_Source_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint64 uin = 1;
  inline bool has_uin() const;
  inline void clear_uin();
  static const int kUinFieldNumber = 1;
  inline ::google::protobuf::uint64 uin() const;
  inline void set_uin(::google::protobuf::uint64 value);

  // optional uint64 code = 2;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 2;
  inline ::google::protobuf::uint64 code() const;
  inline void set_code(::google::protobuf::uint64 value);

  // optional .AccountSearchPb.record.Source source = 3 [default = UNIVERSAL];
  inline bool has_source() const;
  inline void clear_source();
  static const int kSourceFieldNumber = 3;
  inline ::AccountSearchPb::record_Source source() const;
  inline void set_source(::AccountSearchPb::record_Source value);

  // optional string name = 4;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 4;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 sex = 5;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 5;
  inline ::google::protobuf::uint32 sex() const;
  inline void set_sex(::google::protobuf::uint32 value);

  // optional uint32 age = 6;
  inline bool has_age() const;
  inline void clear_age();
  static const int kAgeFieldNumber = 6;
  inline ::google::protobuf::uint32 age() const;
  inline void set_age(::google::protobuf::uint32 value);

  // optional string account = 7;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 7;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // optional string brief = 8;
  inline bool has_brief() const;
  inline void clear_brief();
  static const int kBriefFieldNumber = 8;
  inline const ::std::string& brief() const;
  inline void set_brief(const ::std::string& value);
  inline void set_brief(const char* value);
  inline void set_brief(const char* value, size_t size);
  inline ::std::string* mutable_brief();
  inline ::std::string* release_brief();
  inline void set_allocated_brief(::std::string* brief);

  // optional uint32 number = 9;
  inline bool has_number() const;
  inline void clear_number();
  static const int kNumberFieldNumber = 9;
  inline ::google::protobuf::uint32 number() const;
  inline void set_number(::google::protobuf::uint32 value);

  // optional uint64 flag = 10;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 10;
  inline ::google::protobuf::uint64 flag() const;
  inline void set_flag(::google::protobuf::uint64 value);

  // optional uint64 relation = 11;
  inline bool has_relation() const;
  inline void clear_relation();
  static const int kRelationFieldNumber = 11;
  inline ::google::protobuf::uint64 relation() const;
  inline void set_relation(::google::protobuf::uint64 value);

  // optional string mobile = 12;
  inline bool has_mobile() const;
  inline void clear_mobile();
  static const int kMobileFieldNumber = 12;
  inline const ::std::string& mobile() const;
  inline void set_mobile(const ::std::string& value);
  inline void set_mobile(const char* value);
  inline void set_mobile(const char* value, size_t size);
  inline ::std::string* mutable_mobile();
  inline ::std::string* release_mobile();
  inline void set_allocated_mobile(::std::string* mobile);

  // optional bytes sign = 13;
  inline bool has_sign() const;
  inline void clear_sign();
  static const int kSignFieldNumber = 13;
  inline const ::std::string& sign() const;
  inline void set_sign(const ::std::string& value);
  inline void set_sign(const char* value);
  inline void set_sign(const void* value, size_t size);
  inline ::std::string* mutable_sign();
  inline ::std::string* release_sign();
  inline void set_allocated_sign(::std::string* sign);

  // optional uint32 country = 14;
  inline bool has_country() const;
  inline void clear_country();
  static const int kCountryFieldNumber = 14;
  inline ::google::protobuf::uint32 country() const;
  inline void set_country(::google::protobuf::uint32 value);

  // optional uint32 province = 15;
  inline bool has_province() const;
  inline void clear_province();
  static const int kProvinceFieldNumber = 15;
  inline ::google::protobuf::uint32 province() const;
  inline void set_province(::google::protobuf::uint32 value);

  // optional uint32 city = 16;
  inline bool has_city() const;
  inline void clear_city();
  static const int kCityFieldNumber = 16;
  inline ::google::protobuf::uint32 city() const;
  inline void set_city(::google::protobuf::uint32 value);

  // optional uint32 class_index = 17;
  inline bool has_class_index() const;
  inline void clear_class_index();
  static const int kClassIndexFieldNumber = 17;
  inline ::google::protobuf::uint32 class_index() const;
  inline void set_class_index(::google::protobuf::uint32 value);

  // optional string class_name = 18;
  inline bool has_class_name() const;
  inline void clear_class_name();
  static const int kClassNameFieldNumber = 18;
  inline const ::std::string& class_name() const;
  inline void set_class_name(const ::std::string& value);
  inline void set_class_name(const char* value);
  inline void set_class_name(const char* value, size_t size);
  inline ::std::string* mutable_class_name();
  inline ::std::string* release_class_name();
  inline void set_allocated_class_name(::std::string* class_name);

  // optional string country_name = 19;
  inline bool has_country_name() const;
  inline void clear_country_name();
  static const int kCountryNameFieldNumber = 19;
  inline const ::std::string& country_name() const;
  inline void set_country_name(const ::std::string& value);
  inline void set_country_name(const char* value);
  inline void set_country_name(const char* value, size_t size);
  inline ::std::string* mutable_country_name();
  inline ::std::string* release_country_name();
  inline void set_allocated_country_name(::std::string* country_name);

  // optional string province_name = 20;
  inline bool has_province_name() const;
  inline void clear_province_name();
  static const int kProvinceNameFieldNumber = 20;
  inline const ::std::string& province_name() const;
  inline void set_province_name(const ::std::string& value);
  inline void set_province_name(const char* value);
  inline void set_province_name(const char* value, size_t size);
  inline ::std::string* mutable_province_name();
  inline ::std::string* release_province_name();
  inline void set_allocated_province_name(::std::string* province_name);

  // optional string city_name = 21;
  inline bool has_city_name() const;
  inline void clear_city_name();
  static const int kCityNameFieldNumber = 21;
  inline const ::std::string& city_name() const;
  inline void set_city_name(const ::std::string& value);
  inline void set_city_name(const char* value);
  inline void set_city_name(const char* value, size_t size);
  inline ::std::string* mutable_city_name();
  inline ::std::string* release_city_name();
  inline void set_allocated_city_name(::std::string* city_name);

  // optional .AccountSearchPb.Label msg_group_labels = 22;
  inline bool has_msg_group_labels() const;
  inline void clear_msg_group_labels();
  static const int kMsgGroupLabelsFieldNumber = 22;
  inline const ::AccountSearchPb::Label& msg_group_labels() const;
  inline ::AccountSearchPb::Label* mutable_msg_group_labels();
  inline ::AccountSearchPb::Label* release_msg_group_labels();
  inline void set_allocated_msg_group_labels(::AccountSearchPb::Label* msg_group_labels);

  // @@protoc_insertion_point(class_scope:AccountSearchPb.record)
 private:
  inline void set_has_uin();
  inline void clear_has_uin();
  inline void set_has_code();
  inline void clear_has_code();
  inline void set_has_source();
  inline void clear_has_source();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_age();
  inline void clear_has_age();
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_brief();
  inline void clear_has_brief();
  inline void set_has_number();
  inline void clear_has_number();
  inline void set_has_flag();
  inline void clear_has_flag();
  inline void set_has_relation();
  inline void clear_has_relation();
  inline void set_has_mobile();
  inline void clear_has_mobile();
  inline void set_has_sign();
  inline void clear_has_sign();
  inline void set_has_country();
  inline void clear_has_country();
  inline void set_has_province();
  inline void clear_has_province();
  inline void set_has_city();
  inline void clear_has_city();
  inline void set_has_class_index();
  inline void clear_has_class_index();
  inline void set_has_class_name();
  inline void clear_has_class_name();
  inline void set_has_country_name();
  inline void clear_has_country_name();
  inline void set_has_province_name();
  inline void clear_has_province_name();
  inline void set_has_city_name();
  inline void clear_has_city_name();
  inline void set_has_msg_group_labels();
  inline void clear_has_msg_group_labels();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 uin_;
  ::google::protobuf::uint64 code_;
  ::std::string* name_;
  int source_;
  ::google::protobuf::uint32 sex_;
  ::std::string* account_;
  ::google::protobuf::uint32 age_;
  ::google::protobuf::uint32 number_;
  ::std::string* brief_;
  ::google::protobuf::uint64 flag_;
  ::google::protobuf::uint64 relation_;
  ::std::string* mobile_;
  ::std::string* sign_;
  ::google::protobuf::uint32 country_;
  ::google::protobuf::uint32 province_;
  ::google::protobuf::uint32 city_;
  ::google::protobuf::uint32 class_index_;
  ::std::string* class_name_;
  ::std::string* country_name_;
  ::std::string* province_name_;
  ::std::string* city_name_;
  ::AccountSearchPb::Label* msg_group_labels_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(22 + 31) / 32];

  friend void  protobuf_AddDesc_record_2eproto();
  friend void protobuf_AssignDesc_record_2eproto();
  friend void protobuf_ShutdownFile_record_2eproto();

  void InitAsDefaultInstance();
  static record* default_instance_;
};
// ===================================================================


// ===================================================================

// record

// optional uint64 uin = 1;
inline bool record::has_uin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void record::set_has_uin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void record::clear_has_uin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void record::clear_uin() {
  uin_ = GOOGLE_ULONGLONG(0);
  clear_has_uin();
}
inline ::google::protobuf::uint64 record::uin() const {
  return uin_;
}
inline void record::set_uin(::google::protobuf::uint64 value) {
  set_has_uin();
  uin_ = value;
}

// optional uint64 code = 2;
inline bool record::has_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void record::set_has_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void record::clear_has_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void record::clear_code() {
  code_ = GOOGLE_ULONGLONG(0);
  clear_has_code();
}
inline ::google::protobuf::uint64 record::code() const {
  return code_;
}
inline void record::set_code(::google::protobuf::uint64 value) {
  set_has_code();
  code_ = value;
}

// optional .AccountSearchPb.record.Source source = 3 [default = UNIVERSAL];
inline bool record::has_source() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void record::set_has_source() {
  _has_bits_[0] |= 0x00000004u;
}
inline void record::clear_has_source() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void record::clear_source() {
  source_ = 1;
  clear_has_source();
}
inline ::AccountSearchPb::record_Source record::source() const {
  return static_cast< ::AccountSearchPb::record_Source >(source_);
}
inline void record::set_source(::AccountSearchPb::record_Source value) {
  assert(::AccountSearchPb::record_Source_IsValid(value));
  set_has_source();
  source_ = value;
}

// optional string name = 4;
inline bool record::has_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void record::set_has_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void record::clear_has_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void record::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& record::name() const {
  return *name_;
}
inline void record::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void record::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void record::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* record::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* record::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void record::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 sex = 5;
inline bool record::has_sex() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void record::set_has_sex() {
  _has_bits_[0] |= 0x00000010u;
}
inline void record::clear_has_sex() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void record::clear_sex() {
  sex_ = 0u;
  clear_has_sex();
}
inline ::google::protobuf::uint32 record::sex() const {
  return sex_;
}
inline void record::set_sex(::google::protobuf::uint32 value) {
  set_has_sex();
  sex_ = value;
}

// optional uint32 age = 6;
inline bool record::has_age() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void record::set_has_age() {
  _has_bits_[0] |= 0x00000020u;
}
inline void record::clear_has_age() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void record::clear_age() {
  age_ = 0u;
  clear_has_age();
}
inline ::google::protobuf::uint32 record::age() const {
  return age_;
}
inline void record::set_age(::google::protobuf::uint32 value) {
  set_has_age();
  age_ = value;
}

// optional string account = 7;
inline bool record::has_account() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void record::set_has_account() {
  _has_bits_[0] |= 0x00000040u;
}
inline void record::clear_has_account() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void record::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& record::account() const {
  return *account_;
}
inline void record::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void record::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void record::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* record::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* record::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void record::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string brief = 8;
inline bool record::has_brief() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void record::set_has_brief() {
  _has_bits_[0] |= 0x00000080u;
}
inline void record::clear_has_brief() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void record::clear_brief() {
  if (brief_ != &::google::protobuf::internal::kEmptyString) {
    brief_->clear();
  }
  clear_has_brief();
}
inline const ::std::string& record::brief() const {
  return *brief_;
}
inline void record::set_brief(const ::std::string& value) {
  set_has_brief();
  if (brief_ == &::google::protobuf::internal::kEmptyString) {
    brief_ = new ::std::string;
  }
  brief_->assign(value);
}
inline void record::set_brief(const char* value) {
  set_has_brief();
  if (brief_ == &::google::protobuf::internal::kEmptyString) {
    brief_ = new ::std::string;
  }
  brief_->assign(value);
}
inline void record::set_brief(const char* value, size_t size) {
  set_has_brief();
  if (brief_ == &::google::protobuf::internal::kEmptyString) {
    brief_ = new ::std::string;
  }
  brief_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* record::mutable_brief() {
  set_has_brief();
  if (brief_ == &::google::protobuf::internal::kEmptyString) {
    brief_ = new ::std::string;
  }
  return brief_;
}
inline ::std::string* record::release_brief() {
  clear_has_brief();
  if (brief_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = brief_;
    brief_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void record::set_allocated_brief(::std::string* brief) {
  if (brief_ != &::google::protobuf::internal::kEmptyString) {
    delete brief_;
  }
  if (brief) {
    set_has_brief();
    brief_ = brief;
  } else {
    clear_has_brief();
    brief_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 number = 9;
inline bool record::has_number() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void record::set_has_number() {
  _has_bits_[0] |= 0x00000100u;
}
inline void record::clear_has_number() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void record::clear_number() {
  number_ = 0u;
  clear_has_number();
}
inline ::google::protobuf::uint32 record::number() const {
  return number_;
}
inline void record::set_number(::google::protobuf::uint32 value) {
  set_has_number();
  number_ = value;
}

// optional uint64 flag = 10;
inline bool record::has_flag() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void record::set_has_flag() {
  _has_bits_[0] |= 0x00000200u;
}
inline void record::clear_has_flag() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void record::clear_flag() {
  flag_ = GOOGLE_ULONGLONG(0);
  clear_has_flag();
}
inline ::google::protobuf::uint64 record::flag() const {
  return flag_;
}
inline void record::set_flag(::google::protobuf::uint64 value) {
  set_has_flag();
  flag_ = value;
}

// optional uint64 relation = 11;
inline bool record::has_relation() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void record::set_has_relation() {
  _has_bits_[0] |= 0x00000400u;
}
inline void record::clear_has_relation() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void record::clear_relation() {
  relation_ = GOOGLE_ULONGLONG(0);
  clear_has_relation();
}
inline ::google::protobuf::uint64 record::relation() const {
  return relation_;
}
inline void record::set_relation(::google::protobuf::uint64 value) {
  set_has_relation();
  relation_ = value;
}

// optional string mobile = 12;
inline bool record::has_mobile() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void record::set_has_mobile() {
  _has_bits_[0] |= 0x00000800u;
}
inline void record::clear_has_mobile() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void record::clear_mobile() {
  if (mobile_ != &::google::protobuf::internal::kEmptyString) {
    mobile_->clear();
  }
  clear_has_mobile();
}
inline const ::std::string& record::mobile() const {
  return *mobile_;
}
inline void record::set_mobile(const ::std::string& value) {
  set_has_mobile();
  if (mobile_ == &::google::protobuf::internal::kEmptyString) {
    mobile_ = new ::std::string;
  }
  mobile_->assign(value);
}
inline void record::set_mobile(const char* value) {
  set_has_mobile();
  if (mobile_ == &::google::protobuf::internal::kEmptyString) {
    mobile_ = new ::std::string;
  }
  mobile_->assign(value);
}
inline void record::set_mobile(const char* value, size_t size) {
  set_has_mobile();
  if (mobile_ == &::google::protobuf::internal::kEmptyString) {
    mobile_ = new ::std::string;
  }
  mobile_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* record::mutable_mobile() {
  set_has_mobile();
  if (mobile_ == &::google::protobuf::internal::kEmptyString) {
    mobile_ = new ::std::string;
  }
  return mobile_;
}
inline ::std::string* record::release_mobile() {
  clear_has_mobile();
  if (mobile_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = mobile_;
    mobile_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void record::set_allocated_mobile(::std::string* mobile) {
  if (mobile_ != &::google::protobuf::internal::kEmptyString) {
    delete mobile_;
  }
  if (mobile) {
    set_has_mobile();
    mobile_ = mobile;
  } else {
    clear_has_mobile();
    mobile_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes sign = 13;
inline bool record::has_sign() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void record::set_has_sign() {
  _has_bits_[0] |= 0x00001000u;
}
inline void record::clear_has_sign() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void record::clear_sign() {
  if (sign_ != &::google::protobuf::internal::kEmptyString) {
    sign_->clear();
  }
  clear_has_sign();
}
inline const ::std::string& record::sign() const {
  return *sign_;
}
inline void record::set_sign(const ::std::string& value) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    sign_ = new ::std::string;
  }
  sign_->assign(value);
}
inline void record::set_sign(const char* value) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    sign_ = new ::std::string;
  }
  sign_->assign(value);
}
inline void record::set_sign(const void* value, size_t size) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    sign_ = new ::std::string;
  }
  sign_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* record::mutable_sign() {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    sign_ = new ::std::string;
  }
  return sign_;
}
inline ::std::string* record::release_sign() {
  clear_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sign_;
    sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void record::set_allocated_sign(::std::string* sign) {
  if (sign_ != &::google::protobuf::internal::kEmptyString) {
    delete sign_;
  }
  if (sign) {
    set_has_sign();
    sign_ = sign;
  } else {
    clear_has_sign();
    sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 country = 14;
inline bool record::has_country() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void record::set_has_country() {
  _has_bits_[0] |= 0x00002000u;
}
inline void record::clear_has_country() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void record::clear_country() {
  country_ = 0u;
  clear_has_country();
}
inline ::google::protobuf::uint32 record::country() const {
  return country_;
}
inline void record::set_country(::google::protobuf::uint32 value) {
  set_has_country();
  country_ = value;
}

// optional uint32 province = 15;
inline bool record::has_province() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void record::set_has_province() {
  _has_bits_[0] |= 0x00004000u;
}
inline void record::clear_has_province() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void record::clear_province() {
  province_ = 0u;
  clear_has_province();
}
inline ::google::protobuf::uint32 record::province() const {
  return province_;
}
inline void record::set_province(::google::protobuf::uint32 value) {
  set_has_province();
  province_ = value;
}

// optional uint32 city = 16;
inline bool record::has_city() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void record::set_has_city() {
  _has_bits_[0] |= 0x00008000u;
}
inline void record::clear_has_city() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void record::clear_city() {
  city_ = 0u;
  clear_has_city();
}
inline ::google::protobuf::uint32 record::city() const {
  return city_;
}
inline void record::set_city(::google::protobuf::uint32 value) {
  set_has_city();
  city_ = value;
}

// optional uint32 class_index = 17;
inline bool record::has_class_index() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void record::set_has_class_index() {
  _has_bits_[0] |= 0x00010000u;
}
inline void record::clear_has_class_index() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void record::clear_class_index() {
  class_index_ = 0u;
  clear_has_class_index();
}
inline ::google::protobuf::uint32 record::class_index() const {
  return class_index_;
}
inline void record::set_class_index(::google::protobuf::uint32 value) {
  set_has_class_index();
  class_index_ = value;
}

// optional string class_name = 18;
inline bool record::has_class_name() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void record::set_has_class_name() {
  _has_bits_[0] |= 0x00020000u;
}
inline void record::clear_has_class_name() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void record::clear_class_name() {
  if (class_name_ != &::google::protobuf::internal::kEmptyString) {
    class_name_->clear();
  }
  clear_has_class_name();
}
inline const ::std::string& record::class_name() const {
  return *class_name_;
}
inline void record::set_class_name(const ::std::string& value) {
  set_has_class_name();
  if (class_name_ == &::google::protobuf::internal::kEmptyString) {
    class_name_ = new ::std::string;
  }
  class_name_->assign(value);
}
inline void record::set_class_name(const char* value) {
  set_has_class_name();
  if (class_name_ == &::google::protobuf::internal::kEmptyString) {
    class_name_ = new ::std::string;
  }
  class_name_->assign(value);
}
inline void record::set_class_name(const char* value, size_t size) {
  set_has_class_name();
  if (class_name_ == &::google::protobuf::internal::kEmptyString) {
    class_name_ = new ::std::string;
  }
  class_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* record::mutable_class_name() {
  set_has_class_name();
  if (class_name_ == &::google::protobuf::internal::kEmptyString) {
    class_name_ = new ::std::string;
  }
  return class_name_;
}
inline ::std::string* record::release_class_name() {
  clear_has_class_name();
  if (class_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = class_name_;
    class_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void record::set_allocated_class_name(::std::string* class_name) {
  if (class_name_ != &::google::protobuf::internal::kEmptyString) {
    delete class_name_;
  }
  if (class_name) {
    set_has_class_name();
    class_name_ = class_name;
  } else {
    clear_has_class_name();
    class_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string country_name = 19;
inline bool record::has_country_name() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void record::set_has_country_name() {
  _has_bits_[0] |= 0x00040000u;
}
inline void record::clear_has_country_name() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void record::clear_country_name() {
  if (country_name_ != &::google::protobuf::internal::kEmptyString) {
    country_name_->clear();
  }
  clear_has_country_name();
}
inline const ::std::string& record::country_name() const {
  return *country_name_;
}
inline void record::set_country_name(const ::std::string& value) {
  set_has_country_name();
  if (country_name_ == &::google::protobuf::internal::kEmptyString) {
    country_name_ = new ::std::string;
  }
  country_name_->assign(value);
}
inline void record::set_country_name(const char* value) {
  set_has_country_name();
  if (country_name_ == &::google::protobuf::internal::kEmptyString) {
    country_name_ = new ::std::string;
  }
  country_name_->assign(value);
}
inline void record::set_country_name(const char* value, size_t size) {
  set_has_country_name();
  if (country_name_ == &::google::protobuf::internal::kEmptyString) {
    country_name_ = new ::std::string;
  }
  country_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* record::mutable_country_name() {
  set_has_country_name();
  if (country_name_ == &::google::protobuf::internal::kEmptyString) {
    country_name_ = new ::std::string;
  }
  return country_name_;
}
inline ::std::string* record::release_country_name() {
  clear_has_country_name();
  if (country_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = country_name_;
    country_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void record::set_allocated_country_name(::std::string* country_name) {
  if (country_name_ != &::google::protobuf::internal::kEmptyString) {
    delete country_name_;
  }
  if (country_name) {
    set_has_country_name();
    country_name_ = country_name;
  } else {
    clear_has_country_name();
    country_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string province_name = 20;
inline bool record::has_province_name() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void record::set_has_province_name() {
  _has_bits_[0] |= 0x00080000u;
}
inline void record::clear_has_province_name() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void record::clear_province_name() {
  if (province_name_ != &::google::protobuf::internal::kEmptyString) {
    province_name_->clear();
  }
  clear_has_province_name();
}
inline const ::std::string& record::province_name() const {
  return *province_name_;
}
inline void record::set_province_name(const ::std::string& value) {
  set_has_province_name();
  if (province_name_ == &::google::protobuf::internal::kEmptyString) {
    province_name_ = new ::std::string;
  }
  province_name_->assign(value);
}
inline void record::set_province_name(const char* value) {
  set_has_province_name();
  if (province_name_ == &::google::protobuf::internal::kEmptyString) {
    province_name_ = new ::std::string;
  }
  province_name_->assign(value);
}
inline void record::set_province_name(const char* value, size_t size) {
  set_has_province_name();
  if (province_name_ == &::google::protobuf::internal::kEmptyString) {
    province_name_ = new ::std::string;
  }
  province_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* record::mutable_province_name() {
  set_has_province_name();
  if (province_name_ == &::google::protobuf::internal::kEmptyString) {
    province_name_ = new ::std::string;
  }
  return province_name_;
}
inline ::std::string* record::release_province_name() {
  clear_has_province_name();
  if (province_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = province_name_;
    province_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void record::set_allocated_province_name(::std::string* province_name) {
  if (province_name_ != &::google::protobuf::internal::kEmptyString) {
    delete province_name_;
  }
  if (province_name) {
    set_has_province_name();
    province_name_ = province_name;
  } else {
    clear_has_province_name();
    province_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string city_name = 21;
inline bool record::has_city_name() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void record::set_has_city_name() {
  _has_bits_[0] |= 0x00100000u;
}
inline void record::clear_has_city_name() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void record::clear_city_name() {
  if (city_name_ != &::google::protobuf::internal::kEmptyString) {
    city_name_->clear();
  }
  clear_has_city_name();
}
inline const ::std::string& record::city_name() const {
  return *city_name_;
}
inline void record::set_city_name(const ::std::string& value) {
  set_has_city_name();
  if (city_name_ == &::google::protobuf::internal::kEmptyString) {
    city_name_ = new ::std::string;
  }
  city_name_->assign(value);
}
inline void record::set_city_name(const char* value) {
  set_has_city_name();
  if (city_name_ == &::google::protobuf::internal::kEmptyString) {
    city_name_ = new ::std::string;
  }
  city_name_->assign(value);
}
inline void record::set_city_name(const char* value, size_t size) {
  set_has_city_name();
  if (city_name_ == &::google::protobuf::internal::kEmptyString) {
    city_name_ = new ::std::string;
  }
  city_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* record::mutable_city_name() {
  set_has_city_name();
  if (city_name_ == &::google::protobuf::internal::kEmptyString) {
    city_name_ = new ::std::string;
  }
  return city_name_;
}
inline ::std::string* record::release_city_name() {
  clear_has_city_name();
  if (city_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = city_name_;
    city_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void record::set_allocated_city_name(::std::string* city_name) {
  if (city_name_ != &::google::protobuf::internal::kEmptyString) {
    delete city_name_;
  }
  if (city_name) {
    set_has_city_name();
    city_name_ = city_name;
  } else {
    clear_has_city_name();
    city_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .AccountSearchPb.Label msg_group_labels = 22;
inline bool record::has_msg_group_labels() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void record::set_has_msg_group_labels() {
  _has_bits_[0] |= 0x00200000u;
}
inline void record::clear_has_msg_group_labels() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void record::clear_msg_group_labels() {
  if (msg_group_labels_ != NULL) msg_group_labels_->::AccountSearchPb::Label::Clear();
  clear_has_msg_group_labels();
}
inline const ::AccountSearchPb::Label& record::msg_group_labels() const {
  return msg_group_labels_ != NULL ? *msg_group_labels_ : *default_instance_->msg_group_labels_;
}
inline ::AccountSearchPb::Label* record::mutable_msg_group_labels() {
  set_has_msg_group_labels();
  if (msg_group_labels_ == NULL) msg_group_labels_ = new ::AccountSearchPb::Label;
  return msg_group_labels_;
}
inline ::AccountSearchPb::Label* record::release_msg_group_labels() {
  clear_has_msg_group_labels();
  ::AccountSearchPb::Label* temp = msg_group_labels_;
  msg_group_labels_ = NULL;
  return temp;
}
inline void record::set_allocated_msg_group_labels(::AccountSearchPb::Label* msg_group_labels) {
  delete msg_group_labels_;
  msg_group_labels_ = msg_group_labels;
  if (msg_group_labels) {
    set_has_msg_group_labels();
  } else {
    clear_has_msg_group_labels();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace AccountSearchPb

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AccountSearchPb::record_Source>() {
  return ::AccountSearchPb::record_Source_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_record_2eproto__INCLUDED
