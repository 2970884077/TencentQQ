// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: record.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "record.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace AccountSearchPb {

namespace {

const ::google::protobuf::Descriptor* record_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  record_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* record_Source_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_record_2eproto() {
  protobuf_AddDesc_record_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "record.proto");
  GOOGLE_CHECK(file != NULL);
  record_descriptor_ = file->message_type(0);
  static const int record_offsets_[22] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(record, uin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(record, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(record, source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(record, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(record, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(record, age_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(record, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(record, brief_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(record, number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(record, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(record, relation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(record, mobile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(record, sign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(record, country_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(record, province_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(record, city_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(record, class_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(record, class_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(record, country_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(record, province_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(record, city_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(record, msg_group_labels_),
  };
  record_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      record_descriptor_,
      record::default_instance_,
      record_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(record, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(record, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(record));
  record_Source_descriptor_ = record_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_record_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    record_descriptor_, &record::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_record_2eproto() {
  delete record::default_instance_;
  delete record_reflection_;
}

void protobuf_AddDesc_record_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::AccountSearchPb::protobuf_AddDesc_Label_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014record.proto\022\017AccountSearchPb\032\013Label.p"
    "roto\"\331\003\n\006record\022\013\n\003uin\030\001 \001(\004\022\014\n\004code\030\002 \001"
    "(\004\0229\n\006source\030\003 \001(\0162\036.AccountSearchPb.rec"
    "ord.Source:\tUNIVERSAL\022\014\n\004name\030\004 \001(\t\022\013\n\003s"
    "ex\030\005 \001(\r\022\013\n\003age\030\006 \001(\r\022\017\n\007account\030\007 \001(\t\022\r"
    "\n\005brief\030\010 \001(\t\022\016\n\006number\030\t \001(\r\022\014\n\004flag\030\n "
    "\001(\004\022\020\n\010relation\030\013 \001(\004\022\016\n\006mobile\030\014 \001(\t\022\014\n"
    "\004sign\030\r \001(\014\022\017\n\007country\030\016 \001(\r\022\020\n\010province"
    "\030\017 \001(\r\022\014\n\004city\030\020 \001(\r\022\023\n\013class_index\030\021 \001("
    "\r\022\022\n\nclass_name\030\022 \001(\t\022\024\n\014country_name\030\023 "
    "\001(\t\022\025\n\rprovince_name\030\024 \001(\t\022\021\n\tcity_name\030"
    "\025 \001(\t\0220\n\020msg_group_labels\030\026 \001(\0132\026.Accoun"
    "tSearchPb.Label\"\027\n\006Source\022\r\n\tUNIVERSAL\020\001", 520);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "record.proto", &protobuf_RegisterTypes);
  record::default_instance_ = new record();
  record::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_record_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_record_2eproto {
  StaticDescriptorInitializer_record_2eproto() {
    protobuf_AddDesc_record_2eproto();
  }
} static_descriptor_initializer_record_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* record_Source_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return record_Source_descriptor_;
}
bool record_Source_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const record_Source record::UNIVERSAL;
const record_Source record::Source_MIN;
const record_Source record::Source_MAX;
const int record::Source_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int record::kUinFieldNumber;
const int record::kCodeFieldNumber;
const int record::kSourceFieldNumber;
const int record::kNameFieldNumber;
const int record::kSexFieldNumber;
const int record::kAgeFieldNumber;
const int record::kAccountFieldNumber;
const int record::kBriefFieldNumber;
const int record::kNumberFieldNumber;
const int record::kFlagFieldNumber;
const int record::kRelationFieldNumber;
const int record::kMobileFieldNumber;
const int record::kSignFieldNumber;
const int record::kCountryFieldNumber;
const int record::kProvinceFieldNumber;
const int record::kCityFieldNumber;
const int record::kClassIndexFieldNumber;
const int record::kClassNameFieldNumber;
const int record::kCountryNameFieldNumber;
const int record::kProvinceNameFieldNumber;
const int record::kCityNameFieldNumber;
const int record::kMsgGroupLabelsFieldNumber;
#endif  // !_MSC_VER

record::record()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void record::InitAsDefaultInstance() {
  msg_group_labels_ = const_cast< ::AccountSearchPb::Label*>(&::AccountSearchPb::Label::default_instance());
}

record::record(const record& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void record::SharedCtor() {
  _cached_size_ = 0;
  uin_ = GOOGLE_ULONGLONG(0);
  code_ = GOOGLE_ULONGLONG(0);
  source_ = 1;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sex_ = 0u;
  age_ = 0u;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  brief_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  number_ = 0u;
  flag_ = GOOGLE_ULONGLONG(0);
  relation_ = GOOGLE_ULONGLONG(0);
  mobile_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  country_ = 0u;
  province_ = 0u;
  city_ = 0u;
  class_index_ = 0u;
  class_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  country_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  province_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  city_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  msg_group_labels_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

record::~record() {
  SharedDtor();
}

void record::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (brief_ != &::google::protobuf::internal::kEmptyString) {
    delete brief_;
  }
  if (mobile_ != &::google::protobuf::internal::kEmptyString) {
    delete mobile_;
  }
  if (sign_ != &::google::protobuf::internal::kEmptyString) {
    delete sign_;
  }
  if (class_name_ != &::google::protobuf::internal::kEmptyString) {
    delete class_name_;
  }
  if (country_name_ != &::google::protobuf::internal::kEmptyString) {
    delete country_name_;
  }
  if (province_name_ != &::google::protobuf::internal::kEmptyString) {
    delete province_name_;
  }
  if (city_name_ != &::google::protobuf::internal::kEmptyString) {
    delete city_name_;
  }
  if (this != default_instance_) {
    delete msg_group_labels_;
  }
}

void record::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* record::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return record_descriptor_;
}

const record& record::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_record_2eproto();
  return *default_instance_;
}

record* record::default_instance_ = NULL;

record* record::New() const {
  return new record;
}

void record::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uin_ = GOOGLE_ULONGLONG(0);
    code_ = GOOGLE_ULONGLONG(0);
    source_ = 1;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    sex_ = 0u;
    age_ = 0u;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    if (has_brief()) {
      if (brief_ != &::google::protobuf::internal::kEmptyString) {
        brief_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    number_ = 0u;
    flag_ = GOOGLE_ULONGLONG(0);
    relation_ = GOOGLE_ULONGLONG(0);
    if (has_mobile()) {
      if (mobile_ != &::google::protobuf::internal::kEmptyString) {
        mobile_->clear();
      }
    }
    if (has_sign()) {
      if (sign_ != &::google::protobuf::internal::kEmptyString) {
        sign_->clear();
      }
    }
    country_ = 0u;
    province_ = 0u;
    city_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    class_index_ = 0u;
    if (has_class_name()) {
      if (class_name_ != &::google::protobuf::internal::kEmptyString) {
        class_name_->clear();
      }
    }
    if (has_country_name()) {
      if (country_name_ != &::google::protobuf::internal::kEmptyString) {
        country_name_->clear();
      }
    }
    if (has_province_name()) {
      if (province_name_ != &::google::protobuf::internal::kEmptyString) {
        province_name_->clear();
      }
    }
    if (has_city_name()) {
      if (city_name_ != &::google::protobuf::internal::kEmptyString) {
        city_name_->clear();
      }
    }
    if (has_msg_group_labels()) {
      if (msg_group_labels_ != NULL) msg_group_labels_->::AccountSearchPb::Label::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool record::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 uin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uin_)));
          set_has_uin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_code;
        break;
      }

      // optional uint64 code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_source;
        break;
      }

      // optional .AccountSearchPb.record.Source source = 3 [default = UNIVERSAL];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_source:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::AccountSearchPb::record_Source_IsValid(value)) {
            set_source(static_cast< ::AccountSearchPb::record_Source >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // optional string name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_sex;
        break;
      }

      // optional uint32 sex = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_age;
        break;
      }

      // optional uint32 age = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_age:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &age_)));
          set_has_age();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_account;
        break;
      }

      // optional string account = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_brief;
        break;
      }

      // optional string brief = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_brief:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_brief()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->brief().data(), this->brief().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_number;
        break;
      }

      // optional uint32 number = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_)));
          set_has_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_flag;
        break;
      }

      // optional uint64 flag = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_relation;
        break;
      }

      // optional uint64 relation = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_relation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &relation_)));
          set_has_relation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_mobile;
        break;
      }

      // optional string mobile = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mobile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mobile()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mobile().data(), this->mobile().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_sign;
        break;
      }

      // optional bytes sign = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sign:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sign()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_country;
        break;
      }

      // optional uint32 country = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_country:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &country_)));
          set_has_country();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_province;
        break;
      }

      // optional uint32 province = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_province:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &province_)));
          set_has_province();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_city;
        break;
      }

      // optional uint32 city = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_city:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &city_)));
          set_has_city();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_class_index;
        break;
      }

      // optional uint32 class_index = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_class_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &class_index_)));
          set_has_class_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_class_name;
        break;
      }

      // optional string class_name = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_class_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_class_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->class_name().data(), this->class_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_country_name;
        break;
      }

      // optional string country_name = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_country_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_country_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->country_name().data(), this->country_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_province_name;
        break;
      }

      // optional string province_name = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_province_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_province_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->province_name().data(), this->province_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_city_name;
        break;
      }

      // optional string city_name = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_city_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_city_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->city_name().data(), this->city_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_msg_group_labels;
        break;
      }

      // optional .AccountSearchPb.Label msg_group_labels = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg_group_labels:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg_group_labels()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void record::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 uin = 1;
  if (has_uin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uin(), output);
  }

  // optional uint64 code = 2;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->code(), output);
  }

  // optional .AccountSearchPb.record.Source source = 3 [default = UNIVERSAL];
  if (has_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->source(), output);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->name(), output);
  }

  // optional uint32 sex = 5;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->sex(), output);
  }

  // optional uint32 age = 6;
  if (has_age()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->age(), output);
  }

  // optional string account = 7;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->account(), output);
  }

  // optional string brief = 8;
  if (has_brief()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->brief().data(), this->brief().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->brief(), output);
  }

  // optional uint32 number = 9;
  if (has_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->number(), output);
  }

  // optional uint64 flag = 10;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->flag(), output);
  }

  // optional uint64 relation = 11;
  if (has_relation()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->relation(), output);
  }

  // optional string mobile = 12;
  if (has_mobile()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mobile().data(), this->mobile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->mobile(), output);
  }

  // optional bytes sign = 13;
  if (has_sign()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      13, this->sign(), output);
  }

  // optional uint32 country = 14;
  if (has_country()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->country(), output);
  }

  // optional uint32 province = 15;
  if (has_province()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->province(), output);
  }

  // optional uint32 city = 16;
  if (has_city()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->city(), output);
  }

  // optional uint32 class_index = 17;
  if (has_class_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->class_index(), output);
  }

  // optional string class_name = 18;
  if (has_class_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->class_name().data(), this->class_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->class_name(), output);
  }

  // optional string country_name = 19;
  if (has_country_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->country_name().data(), this->country_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->country_name(), output);
  }

  // optional string province_name = 20;
  if (has_province_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->province_name().data(), this->province_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->province_name(), output);
  }

  // optional string city_name = 21;
  if (has_city_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->city_name().data(), this->city_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      21, this->city_name(), output);
  }

  // optional .AccountSearchPb.Label msg_group_labels = 22;
  if (has_msg_group_labels()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->msg_group_labels(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* record::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 uin = 1;
  if (has_uin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uin(), target);
  }

  // optional uint64 code = 2;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->code(), target);
  }

  // optional .AccountSearchPb.record.Source source = 3 [default = UNIVERSAL];
  if (has_source()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->source(), target);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  // optional uint32 sex = 5;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->sex(), target);
  }

  // optional uint32 age = 6;
  if (has_age()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->age(), target);
  }

  // optional string account = 7;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->account(), target);
  }

  // optional string brief = 8;
  if (has_brief()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->brief().data(), this->brief().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->brief(), target);
  }

  // optional uint32 number = 9;
  if (has_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->number(), target);
  }

  // optional uint64 flag = 10;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->flag(), target);
  }

  // optional uint64 relation = 11;
  if (has_relation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->relation(), target);
  }

  // optional string mobile = 12;
  if (has_mobile()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mobile().data(), this->mobile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->mobile(), target);
  }

  // optional bytes sign = 13;
  if (has_sign()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        13, this->sign(), target);
  }

  // optional uint32 country = 14;
  if (has_country()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->country(), target);
  }

  // optional uint32 province = 15;
  if (has_province()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->province(), target);
  }

  // optional uint32 city = 16;
  if (has_city()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->city(), target);
  }

  // optional uint32 class_index = 17;
  if (has_class_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->class_index(), target);
  }

  // optional string class_name = 18;
  if (has_class_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->class_name().data(), this->class_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->class_name(), target);
  }

  // optional string country_name = 19;
  if (has_country_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->country_name().data(), this->country_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->country_name(), target);
  }

  // optional string province_name = 20;
  if (has_province_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->province_name().data(), this->province_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->province_name(), target);
  }

  // optional string city_name = 21;
  if (has_city_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->city_name().data(), this->city_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->city_name(), target);
  }

  // optional .AccountSearchPb.Label msg_group_labels = 22;
  if (has_msg_group_labels()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->msg_group_labels(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int record::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 uin = 1;
    if (has_uin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uin());
    }

    // optional uint64 code = 2;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->code());
    }

    // optional .AccountSearchPb.record.Source source = 3 [default = UNIVERSAL];
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->source());
    }

    // optional string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 sex = 5;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sex());
    }

    // optional uint32 age = 6;
    if (has_age()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->age());
    }

    // optional string account = 7;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional string brief = 8;
    if (has_brief()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->brief());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 number = 9;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->number());
    }

    // optional uint64 flag = 10;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->flag());
    }

    // optional uint64 relation = 11;
    if (has_relation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->relation());
    }

    // optional string mobile = 12;
    if (has_mobile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mobile());
    }

    // optional bytes sign = 13;
    if (has_sign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sign());
    }

    // optional uint32 country = 14;
    if (has_country()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->country());
    }

    // optional uint32 province = 15;
    if (has_province()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->province());
    }

    // optional uint32 city = 16;
    if (has_city()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->city());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 class_index = 17;
    if (has_class_index()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->class_index());
    }

    // optional string class_name = 18;
    if (has_class_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->class_name());
    }

    // optional string country_name = 19;
    if (has_country_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->country_name());
    }

    // optional string province_name = 20;
    if (has_province_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->province_name());
    }

    // optional string city_name = 21;
    if (has_city_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->city_name());
    }

    // optional .AccountSearchPb.Label msg_group_labels = 22;
    if (has_msg_group_labels()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msg_group_labels());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void record::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const record* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const record*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void record::MergeFrom(const record& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uin()) {
      set_uin(from.uin());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_source()) {
      set_source(from.source());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_age()) {
      set_age(from.age());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_brief()) {
      set_brief(from.brief());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_number()) {
      set_number(from.number());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_relation()) {
      set_relation(from.relation());
    }
    if (from.has_mobile()) {
      set_mobile(from.mobile());
    }
    if (from.has_sign()) {
      set_sign(from.sign());
    }
    if (from.has_country()) {
      set_country(from.country());
    }
    if (from.has_province()) {
      set_province(from.province());
    }
    if (from.has_city()) {
      set_city(from.city());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_class_index()) {
      set_class_index(from.class_index());
    }
    if (from.has_class_name()) {
      set_class_name(from.class_name());
    }
    if (from.has_country_name()) {
      set_country_name(from.country_name());
    }
    if (from.has_province_name()) {
      set_province_name(from.province_name());
    }
    if (from.has_city_name()) {
      set_city_name(from.city_name());
    }
    if (from.has_msg_group_labels()) {
      mutable_msg_group_labels()->::AccountSearchPb::Label::MergeFrom(from.msg_group_labels());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void record::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void record::CopyFrom(const record& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool record::IsInitialized() const {

  return true;
}

void record::Swap(record* other) {
  if (other != this) {
    std::swap(uin_, other->uin_);
    std::swap(code_, other->code_);
    std::swap(source_, other->source_);
    std::swap(name_, other->name_);
    std::swap(sex_, other->sex_);
    std::swap(age_, other->age_);
    std::swap(account_, other->account_);
    std::swap(brief_, other->brief_);
    std::swap(number_, other->number_);
    std::swap(flag_, other->flag_);
    std::swap(relation_, other->relation_);
    std::swap(mobile_, other->mobile_);
    std::swap(sign_, other->sign_);
    std::swap(country_, other->country_);
    std::swap(province_, other->province_);
    std::swap(city_, other->city_);
    std::swap(class_index_, other->class_index_);
    std::swap(class_name_, other->class_name_);
    std::swap(country_name_, other->country_name_);
    std::swap(province_name_, other->province_name_);
    std::swap(city_name_, other->city_name_);
    std::swap(msg_group_labels_, other->msg_group_labels_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata record::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = record_descriptor_;
  metadata.reflection = record_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace AccountSearchPb

// @@protoc_insertion_point(global_scope)
