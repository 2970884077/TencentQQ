// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: search.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "search.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace AccountSearchPb {

namespace {

const ::google::protobuf::Descriptor* search_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  search_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_search_2eproto() {
  protobuf_AddDesc_search_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "search.proto");
  GOOGLE_CHECK(file != NULL);
  search_descriptor_ = file->message_type(0);
  static const int search_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(search, start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(search, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(search, end_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(search, keyword_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(search, list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(search, highlight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(search, msg_user_location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(search, bool_location_group_),
  };
  search_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      search_descriptor_,
      search::default_instance_,
      search_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(search, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(search, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(search));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_search_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    search_descriptor_, &search::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_search_2eproto() {
  delete search::default_instance_;
  delete search_reflection_;
}

void protobuf_AddDesc_search_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::AccountSearchPb::protobuf_AddDesc_record_2eproto();
  ::AccountSearchPb::protobuf_AddDesc_Location_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014search.proto\022\017AccountSearchPb\032\014record."
    "proto\032\016Location.proto\"\330\001\n\006search\022\r\n\005star"
    "t\030\001 \001(\005\022\r\n\005count\030\002 \001(\r\022\013\n\003end\030\003 \001(\r\022\017\n\007k"
    "eyword\030\004 \001(\t\022%\n\004list\030\005 \003(\0132\027.AccountSear"
    "chPb.record\022\021\n\thighlight\030\006 \003(\t\0224\n\021msg_us"
    "er_location\030\n \001(\0132\031.AccountSearchPb.Loca"
    "tion\022\"\n\023bool_location_group\030\013 \001(\010:\005false", 280);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "search.proto", &protobuf_RegisterTypes);
  search::default_instance_ = new search();
  search::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_search_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_search_2eproto {
  StaticDescriptorInitializer_search_2eproto() {
    protobuf_AddDesc_search_2eproto();
  }
} static_descriptor_initializer_search_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int search::kStartFieldNumber;
const int search::kCountFieldNumber;
const int search::kEndFieldNumber;
const int search::kKeywordFieldNumber;
const int search::kListFieldNumber;
const int search::kHighlightFieldNumber;
const int search::kMsgUserLocationFieldNumber;
const int search::kBoolLocationGroupFieldNumber;
#endif  // !_MSC_VER

search::search()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void search::InitAsDefaultInstance() {
  msg_user_location_ = const_cast< ::AccountSearchPb::Location*>(&::AccountSearchPb::Location::default_instance());
}

search::search(const search& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void search::SharedCtor() {
  _cached_size_ = 0;
  start_ = 0;
  count_ = 0u;
  end_ = 0u;
  keyword_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  msg_user_location_ = NULL;
  bool_location_group_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

search::~search() {
  SharedDtor();
}

void search::SharedDtor() {
  if (keyword_ != &::google::protobuf::internal::kEmptyString) {
    delete keyword_;
  }
  if (this != default_instance_) {
    delete msg_user_location_;
  }
}

void search::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* search::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return search_descriptor_;
}

const search& search::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_search_2eproto();
  return *default_instance_;
}

search* search::default_instance_ = NULL;

search* search::New() const {
  return new search;
}

void search::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    start_ = 0;
    count_ = 0u;
    end_ = 0u;
    if (has_keyword()) {
      if (keyword_ != &::google::protobuf::internal::kEmptyString) {
        keyword_->clear();
      }
    }
    if (has_msg_user_location()) {
      if (msg_user_location_ != NULL) msg_user_location_->::AccountSearchPb::Location::Clear();
    }
    bool_location_group_ = false;
  }
  list_.Clear();
  highlight_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool search::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 start = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_)));
          set_has_start();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // optional uint32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_end;
        break;
      }

      // optional uint32 end = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &end_)));
          set_has_end();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_keyword;
        break;
      }

      // optional string keyword = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_keyword:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_keyword()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->keyword().data(), this->keyword().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_list;
        break;
      }

      // repeated .AccountSearchPb.record list = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_list;
        if (input->ExpectTag(50)) goto parse_highlight;
        break;
      }

      // repeated string highlight = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_highlight:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_highlight()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->highlight(this->highlight_size() - 1).data(),
            this->highlight(this->highlight_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_highlight;
        if (input->ExpectTag(82)) goto parse_msg_user_location;
        break;
      }

      // optional .AccountSearchPb.Location msg_user_location = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg_user_location:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg_user_location()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_bool_location_group;
        break;
      }

      // optional bool bool_location_group = 11 [default = false];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bool_location_group:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bool_location_group_)));
          set_has_bool_location_group();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void search::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 start = 1;
  if (has_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->start(), output);
  }

  // optional uint32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  // optional uint32 end = 3;
  if (has_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->end(), output);
  }

  // optional string keyword = 4;
  if (has_keyword()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->keyword().data(), this->keyword().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->keyword(), output);
  }

  // repeated .AccountSearchPb.record list = 5;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->list(i), output);
  }

  // repeated string highlight = 6;
  for (int i = 0; i < this->highlight_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->highlight(i).data(), this->highlight(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->highlight(i), output);
  }

  // optional .AccountSearchPb.Location msg_user_location = 10;
  if (has_msg_user_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->msg_user_location(), output);
  }

  // optional bool bool_location_group = 11 [default = false];
  if (has_bool_location_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->bool_location_group(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* search::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 start = 1;
  if (has_start()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->start(), target);
  }

  // optional uint32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  // optional uint32 end = 3;
  if (has_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->end(), target);
  }

  // optional string keyword = 4;
  if (has_keyword()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->keyword().data(), this->keyword().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->keyword(), target);
  }

  // repeated .AccountSearchPb.record list = 5;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->list(i), target);
  }

  // repeated string highlight = 6;
  for (int i = 0; i < this->highlight_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->highlight(i).data(), this->highlight(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->highlight(i), target);
  }

  // optional .AccountSearchPb.Location msg_user_location = 10;
  if (has_msg_user_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->msg_user_location(), target);
  }

  // optional bool bool_location_group = 11 [default = false];
  if (has_bool_location_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->bool_location_group(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int search::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 start = 1;
    if (has_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->start());
    }

    // optional uint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // optional uint32 end = 3;
    if (has_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->end());
    }

    // optional string keyword = 4;
    if (has_keyword()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->keyword());
    }

    // optional .AccountSearchPb.Location msg_user_location = 10;
    if (has_msg_user_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msg_user_location());
    }

    // optional bool bool_location_group = 11 [default = false];
    if (has_bool_location_group()) {
      total_size += 1 + 1;
    }

  }
  // repeated .AccountSearchPb.record list = 5;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  // repeated string highlight = 6;
  total_size += 1 * this->highlight_size();
  for (int i = 0; i < this->highlight_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->highlight(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void search::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const search* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const search*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void search::MergeFrom(const search& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  highlight_.MergeFrom(from.highlight_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start()) {
      set_start(from.start());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_end()) {
      set_end(from.end());
    }
    if (from.has_keyword()) {
      set_keyword(from.keyword());
    }
    if (from.has_msg_user_location()) {
      mutable_msg_user_location()->::AccountSearchPb::Location::MergeFrom(from.msg_user_location());
    }
    if (from.has_bool_location_group()) {
      set_bool_location_group(from.bool_location_group());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void search::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void search::CopyFrom(const search& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool search::IsInitialized() const {

  return true;
}

void search::Swap(search* other) {
  if (other != this) {
    std::swap(start_, other->start_);
    std::swap(count_, other->count_);
    std::swap(end_, other->end_);
    std::swap(keyword_, other->keyword_);
    list_.Swap(&other->list_);
    highlight_.Swap(&other->highlight_);
    std::swap(msg_user_location_, other->msg_user_location_);
    std::swap(bool_location_group_, other->bool_location_group_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata search::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = search_descriptor_;
  metadata.reflection = search_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace AccountSearchPb

// @@protoc_insertion_point(global_scope)
