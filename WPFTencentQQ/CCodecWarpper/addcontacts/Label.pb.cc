// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Label.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Label.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace AccountSearchPb {

namespace {

const ::google::protobuf::Descriptor* Label_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Label_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Label_2eproto() {
  protobuf_AddDesc_Label_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Label.proto");
  GOOGLE_CHECK(file != NULL);
  Label_descriptor_ = file->message_type(0);
  static const int Label_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Label, bytes_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Label, text_color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Label, edging_color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Label, uint32_label_attr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Label, uint32_label_type_),
  };
  Label_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Label_descriptor_,
      Label::default_instance_,
      Label_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Label, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Label, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Label));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Label_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Label_descriptor_, &Label::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Label_2eproto() {
  delete Label::default_instance_;
  delete Label_reflection_;
}

void protobuf_AddDesc_Label_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::AccountSearchPb::protobuf_AddDesc_Color_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013Label.proto\022\017AccountSearchPb\032\013Color.pr"
    "oto\"\253\001\n\005Label\022\022\n\nbytes_name\030\001 \001(\014\022*\n\ntex"
    "t_color\030\002 \001(\0132\026.AccountSearchPb.Color\022,\n"
    "\014edging_color\030\003 \001(\0132\026.AccountSearchPb.Co"
    "lor\022\031\n\021uint32_label_attr\030\004 \001(\r\022\031\n\021uint32"
    "_label_type\030\005 \001(\r", 217);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Label.proto", &protobuf_RegisterTypes);
  Label::default_instance_ = new Label();
  Label::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Label_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Label_2eproto {
  StaticDescriptorInitializer_Label_2eproto() {
    protobuf_AddDesc_Label_2eproto();
  }
} static_descriptor_initializer_Label_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Label::kBytesNameFieldNumber;
const int Label::kTextColorFieldNumber;
const int Label::kEdgingColorFieldNumber;
const int Label::kUint32LabelAttrFieldNumber;
const int Label::kUint32LabelTypeFieldNumber;
#endif  // !_MSC_VER

Label::Label()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Label::InitAsDefaultInstance() {
  text_color_ = const_cast< ::AccountSearchPb::Color*>(&::AccountSearchPb::Color::default_instance());
  edging_color_ = const_cast< ::AccountSearchPb::Color*>(&::AccountSearchPb::Color::default_instance());
}

Label::Label(const Label& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Label::SharedCtor() {
  _cached_size_ = 0;
  bytes_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  text_color_ = NULL;
  edging_color_ = NULL;
  uint32_label_attr_ = 0u;
  uint32_label_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Label::~Label() {
  SharedDtor();
}

void Label::SharedDtor() {
  if (bytes_name_ != &::google::protobuf::internal::kEmptyString) {
    delete bytes_name_;
  }
  if (this != default_instance_) {
    delete text_color_;
    delete edging_color_;
  }
}

void Label::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Label::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Label_descriptor_;
}

const Label& Label::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Label_2eproto();
  return *default_instance_;
}

Label* Label::default_instance_ = NULL;

Label* Label::New() const {
  return new Label;
}

void Label::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_bytes_name()) {
      if (bytes_name_ != &::google::protobuf::internal::kEmptyString) {
        bytes_name_->clear();
      }
    }
    if (has_text_color()) {
      if (text_color_ != NULL) text_color_->::AccountSearchPb::Color::Clear();
    }
    if (has_edging_color()) {
      if (edging_color_ != NULL) edging_color_->::AccountSearchPb::Color::Clear();
    }
    uint32_label_attr_ = 0u;
    uint32_label_type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Label::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes bytes_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bytes_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_text_color;
        break;
      }

      // optional .AccountSearchPb.Color text_color = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text_color:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_text_color()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_edging_color;
        break;
      }

      // optional .AccountSearchPb.Color edging_color = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_edging_color:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_edging_color()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_uint32_label_attr;
        break;
      }

      // optional uint32 uint32_label_attr = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uint32_label_attr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uint32_label_attr_)));
          set_has_uint32_label_attr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_uint32_label_type;
        break;
      }

      // optional uint32 uint32_label_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uint32_label_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uint32_label_type_)));
          set_has_uint32_label_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Label::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes bytes_name = 1;
  if (has_bytes_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->bytes_name(), output);
  }

  // optional .AccountSearchPb.Color text_color = 2;
  if (has_text_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->text_color(), output);
  }

  // optional .AccountSearchPb.Color edging_color = 3;
  if (has_edging_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->edging_color(), output);
  }

  // optional uint32 uint32_label_attr = 4;
  if (has_uint32_label_attr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->uint32_label_attr(), output);
  }

  // optional uint32 uint32_label_type = 5;
  if (has_uint32_label_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->uint32_label_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Label::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes bytes_name = 1;
  if (has_bytes_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->bytes_name(), target);
  }

  // optional .AccountSearchPb.Color text_color = 2;
  if (has_text_color()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->text_color(), target);
  }

  // optional .AccountSearchPb.Color edging_color = 3;
  if (has_edging_color()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->edging_color(), target);
  }

  // optional uint32 uint32_label_attr = 4;
  if (has_uint32_label_attr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->uint32_label_attr(), target);
  }

  // optional uint32 uint32_label_type = 5;
  if (has_uint32_label_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->uint32_label_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Label::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes bytes_name = 1;
    if (has_bytes_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->bytes_name());
    }

    // optional .AccountSearchPb.Color text_color = 2;
    if (has_text_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->text_color());
    }

    // optional .AccountSearchPb.Color edging_color = 3;
    if (has_edging_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->edging_color());
    }

    // optional uint32 uint32_label_attr = 4;
    if (has_uint32_label_attr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uint32_label_attr());
    }

    // optional uint32 uint32_label_type = 5;
    if (has_uint32_label_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uint32_label_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Label::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Label* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Label*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Label::MergeFrom(const Label& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bytes_name()) {
      set_bytes_name(from.bytes_name());
    }
    if (from.has_text_color()) {
      mutable_text_color()->::AccountSearchPb::Color::MergeFrom(from.text_color());
    }
    if (from.has_edging_color()) {
      mutable_edging_color()->::AccountSearchPb::Color::MergeFrom(from.edging_color());
    }
    if (from.has_uint32_label_attr()) {
      set_uint32_label_attr(from.uint32_label_attr());
    }
    if (from.has_uint32_label_type()) {
      set_uint32_label_type(from.uint32_label_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Label::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Label::CopyFrom(const Label& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Label::IsInitialized() const {

  return true;
}

void Label::Swap(Label* other) {
  if (other != this) {
    std::swap(bytes_name_, other->bytes_name_);
    std::swap(text_color_, other->text_color_);
    std::swap(edging_color_, other->edging_color_);
    std::swap(uint32_label_attr_, other->uint32_label_attr_);
    std::swap(uint32_label_type_, other->uint32_label_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Label::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Label_descriptor_;
  metadata.reflection = Label_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace AccountSearchPb

// @@protoc_insertion_point(global_scope)
